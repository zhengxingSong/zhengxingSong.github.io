<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 常用命令</title>
    <url>/Docker/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p><img src="https://gitee.com/leisurely_Tours/pic-online/raw/master/docker%E5%91%BD%E4%BB%A4.png" alt="docker命令"></p>
<span id="more"></span>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索镜像</span></span><br><span class="line">docker search &lt;image&gt; # 在docker index中搜索image</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">docker pull &lt;image&gt;  # 从docker registry server 中下拉image</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span> </span><br><span class="line">docker images： # 列出images</span><br><span class="line">docker images -a # 列出所有的images（包含历史）</span><br><span class="line">docker rmi  &lt;image ID&gt;： # 删除一个或多个image</span><br></pre></td></tr></table></figure>

<h2 id="镜像容器操作"><a href="#镜像容器操作" class="headerlink" title="镜像容器操作"></a>镜像容器操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用镜像创建容器</span></span><br><span class="line">docker run -i -t sauloal/ubuntu14.04</span><br><span class="line">docker run -i -t sauloal/ubuntu14.04 /bin/bash # 创建一个容器，让其中运行 bash 应用，退出后容器关闭</span><br><span class="line">docker run -itd --name centos_aways --restart=always centos #创建一个名称centos_aways的容器，自动重启</span><br><span class="line"><span class="meta">#</span><span class="bash"> --restart参数：always始终重启；on-failure退出状态非0时重启；默认为，no不重启</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器</span></span><br><span class="line">docker ps ：列出当前所有正在运行的container</span><br><span class="line">docker ps -l ：列出最近一次启动的container</span><br><span class="line">docker ps -a ：列出所有的container（包含历史，即运行过的container）</span><br><span class="line">docker ps -q ：列出最近一次运行的container ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次启动容器</span></span><br><span class="line">docker start/stop/restart &lt;container&gt; #：开启/停止/重启container</span><br><span class="line">docker start [container_id] #：再次运行某个container （包括历史container）</span><br><span class="line"><span class="meta">#</span><span class="bash">进入正在运行的docker容器</span></span><br><span class="line">docker exec -it [container_id] /bin/bash</span><br><span class="line">docker run -i -t -p &lt;host_port:contain_port&gt; #：映射 HOST 端口到容器，方便外部访问容器内服务，host_port 可以省略，省略表示把 container_port 映射到一个动态端口。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm &lt;container...&gt; #：删除一个或多个container</span><br><span class="line">docker rm `docker ps -a -q` #：删除所有的container</span><br><span class="line">docker ps -a -q | xargs docker rm #：同上, 删除所有的container</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器资源限制参数</span></span><br><span class="line">-m 1024m --memory-swap=1024m  # 限制内存最大使用（bug：超过后进程被杀死）</span><br><span class="line">--cpuset-cpus=&quot;0,1&quot;           # 限制容器使用CPU</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器状态信息</span></span><br><span class="line">docker stats </span><br><span class="line">docker stats --no-stream</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker run 和 docker create 参数基本一样，run是创建容器并后台启动，create是只创建容器。 </p>
<p>docker run 相当于docker create 和 docker start</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run创建容器：docker run -itd</span><br><span class="line">create创建： docker create -it</span><br><span class="line"> -t, --tty                       Allocate a pseudo-TTY</span><br><span class="line"> -i, --interactive               Keep STDIN open even if not attached</span><br><span class="line"> -d, --detach                    Run container in background and print container ID #run的参数</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>运行中的镜像叫容器，可以修改容器配置，但这些修改不会影响镜像，可以使用commit指令将容器变为新的镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit &lt;container&gt; [repo:tag] # 将一个container固化为一个新的image，后面的repo:tag可选。</span><br></pre></td></tr></table></figure>

<ul>
<li>持久化容器-export命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export &lt;CONTAINER ID&gt; &gt; /tmp/export.tar</span><br><span class="line">cat /tmp/export.tar | docker import - export:latest # 导入持久化container</span><br><span class="line">docker rm 镜像ID # 删除镜像</span><br></pre></td></tr></table></figure>

<ul>
<li>持久化镜像-save命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save 镜像ID &gt; /tmp/save.tar</span><br><span class="line">docker load &lt; /tmp/save.tar # 导入持久化镜像</span><br><span class="line">docker tag daa11948e23d load:tag # 对image打tag</span><br><span class="line">docker rmi 镜像ID# 删除image</span><br></pre></td></tr></table></figure>



<p>导出后再导入(export-import)的镜像会丢失所有的历史，而保存后再加载（save-load）的镜像没有丢失历史和层(layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回滚。（可以执行docker tag 来回滚之前的层）。</p>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs $CONTAINER_ID #查看docker实例运行日志，确保正常运行</span><br><span class="line">   </span><br><span class="line">docker inspect $CONTAINER_ID #docker inspect &lt;image|container&gt; 查看image或container的底层信息</span><br><span class="line">docker build &lt;path&gt; # 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image</span><br><span class="line">docker build -t repo[:tag] # 同上，可以指定repo和可选的tag</span><br><span class="line">docker build - &lt; &lt;dockerfile&gt; # 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image</span><br><span class="line">docker port &lt;container&gt; &lt;container port&gt; # 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</span><br></pre></td></tr></table></figure>

<h2 id="docker文件存放目录"><a href="#docker文件存放目录" class="headerlink" title="docker文件存放目录"></a><strong>docker文件存放目录</strong></h2><p>Docker实际上把所有东西都放到/var/lib/docker路径下了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost docker]# ls -F</span><br><span class="line">containers/  devicemapper/  execdriver/  graph/  init/  linkgraph.db  repositories-devicemapper  volumes/</span><br></pre></td></tr></table></figure>

<p>containers目录当然就是存放容器（container）了，graph目录存放镜像，文件层（file system layer）存放在graph/imageid/layer路径下，这样我们就可以看看文件层里到底有哪些东西，利用这种层级结构可以清楚的看到文件层是如何一层一层叠加起来的。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>生信</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next主题配置文件</title>
    <url>/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>从该网址下载的next主题为最新版本，使用<code>git tag -l</code>查看版本更新发现自己的版本为v6.5.0.</p>
<span id="more"></span>
<p>下载的时候一定要注意自己的theme的版本，因为后面的美化过程与其息息相关，同时尽量选择最新的版本，我一开始选择的是v5.1.0，其中后期美化的时候就有许多坑（因为这个版本已经不维护了），直到换成v6.5.0，美化的过程才变得顺利。</p>
<h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><p>主题配置文件是<code>theme/next/_config.yml</code>文件，所有的主题相关的展示信息都是通过该文件来执行的，</p>
<h3 id="网页信息设置"><a href="#网页信息设置" class="headerlink" title="网页信息设置"></a>网页信息设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Site Information Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/getting-started/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">footer:  ## 网页页脚设置</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  since: 2021  ## 开始的年份</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Icon between year and copyright info.</span></span><br><span class="line">  icon:  # 在年份和作者之间的图标</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: true  ## 是否动态化显示图标</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#ff0000&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  copyright:  ## 不设置就默认选择站点配置文件的作者</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Powered by Hexo &amp; NexT</span></span><br><span class="line">  powered: false  ## 是否显示网站下面的Powered by Hexo &amp; NexT</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Beian ICP and gongan information <span class="keyword">for</span> Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class="line">  beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br><span class="line">    # The digit in the num of gongan beian.</span><br><span class="line">    gongan_id:</span><br><span class="line">    # The full num of gongan beian.</span><br><span class="line">    gongan_num:</span><br><span class="line">    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span><br><span class="line">    gongan_icon_url:</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can <span class="built_in">set</span> a language value <span class="keyword">if</span> you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CC licenses are available <span class="keyword">in</span> 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa  ## 版权类型</span><br><span class="line">  sidebar: false  ##侧栏显示</span><br><span class="line">  post: true  ##文章底部显示</span><br><span class="line">  language: zh-CN  ## 版权显示语言</span><br></pre></td></tr></table></figure>

<h3 id="主题框架选择设置"><a href="#主题框架选择设置" class="headerlink" title="主题框架选择设置"></a>主题框架选择设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Scheme Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Schemes  <span class="comment">## 四种主题选择哪个就把前面的注释删掉，其余保留</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">scheme: Muse</span></span><br><span class="line"><span class="meta">#</span><span class="bash">scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"><span class="meta">#</span><span class="bash">scheme: Gemini</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dark Mode  <span class="comment"># 是否选择暗模式</span></span></span><br><span class="line">darkmode: false</span><br></pre></td></tr></table></figure>

<h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Menu Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">menu:  ## 侧栏显示的可选选项</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line"><span class="meta">  #</span><span class="bash">about: /about/ || fa fa-user</span></span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="meta">  #</span><span class="bash">schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enable / Disable menu icons / item badges.</span></span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true  ## 菜单选项前的图标</span><br><span class="line">  badges: true  ## 对于该选项所含文件数的计数</span><br></pre></td></tr></table></figure>

<h3 id="侧栏设置"><a href="#侧栏设置" class="headerlink" title="侧栏设置"></a>侧栏设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sidebar Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">sidebar:  ## 位置信息</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Sidebar Position.</span></span><br><span class="line">  position: left</span><br><span class="line"><span class="meta">  #</span><span class="bash">position: right</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Manual define the sidebar width. If commented, will be default <span class="keyword">for</span>:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Muse | Mist: 320</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Pisces | Gemini: 240</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">width: 300</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Sidebar Display (only <span class="keyword">for</span> Muse | Mist), available values:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - post    expand on posts automatically. Default.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - always  expand <span class="keyword">for</span> all pages automatically.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  display: post # post指的是默认的是在文章界面自动展开</span><br><span class="line">                # always在所有的页面都默认展开</span><br><span class="line">                # hide 是在所有的页面都默认隐藏</span><br><span class="line">                # remove 完全移除侧边栏</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Sidebar padding <span class="keyword">in</span> pixels.</span></span><br><span class="line">  padding: 18  # 侧边栏填充像素大小</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Sidebar offset from top menubar <span class="keyword">in</span> pixels (only <span class="keyword">for</span> Pisces | Gemini).</span></span><br><span class="line">  offset: 12  # 侧边栏距离顶部菜单的距离(单位像素)</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Enable sidebar on narrow view (only <span class="keyword">for</span> Muse | Mist).</span></span><br><span class="line">  onmobile: false  # 在移动设备是否显示菜单栏，仅仅针对 Muse 和 Mist主题有效</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sidebar Avatar</span></span><br><span class="line">avatar:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Replace the default image and <span class="built_in">set</span> the url here.</span></span><br><span class="line">  url: /images/header.jpg # 头像图片所在位置themes/next/source/images下</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be dispalyed <span class="keyword">in</span> circle.</span></span><br><span class="line">  rounded: true ## 是否以圆形的方式展示头像</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: true  ## 头像是否旋转</span><br><span class="line">  </span><br><span class="line"><span class="meta"> #</span><span class="bash"> Posts / Categories / Tags <span class="keyword">in</span> sidebar.</span></span><br><span class="line">site_state: true  # 是否在头像下方展示日志和目录信息</span><br><span class="line"></span><br><span class="line">social:  # 你要展示的自己的社交账号</span><br><span class="line">  GitHub: https://github.com/zhengxingSong || fab fa-github</span><br><span class="line"><span class="meta">  #</span><span class="bash">E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line">social_icons: ## 展示设置</span><br><span class="line">  enable: true # 是否展示图标</span><br><span class="line">  icons_only: false ## 是否只展示图标</span><br><span class="line">  transition: false</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> A button to open designated chat widget <span class="keyword">in</span> sidebar.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Firstly, you need <span class="built_in">enable</span> the chat service you want to activate its sidebar button.</span></span><br><span class="line">chat: # 打开chat服务的按钮，首先你需要激活一个  chat 服务，这里可以不用设置，没有实用价值</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash">service: chatra</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">service: tidio</span></span><br><span class="line">  icon: fa fa-comment # Icon name in Font Awesome, set false to disable icon.</span><br><span class="line">  text: Chat # Button text, change it as you wish.</span><br></pre></td></tr></table></figure>

<h3 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/posts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Automatically excerpt description <span class="keyword">in</span> homepage as preamble text.</span></span><br><span class="line">excerpt_description: true  # 在主页显示预览文本</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Read more button</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If <span class="literal">true</span>, the <span class="built_in">read</span> more button will be displayed <span class="keyword">in</span> excerpt section.</span></span><br><span class="line">read_more_btn: true  # 是否显示 阅读更多 按钮</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post meta display settings</span></span><br><span class="line">post_meta:  # 文章显示设置，这里建议默认</span><br><span class="line">  item_text: true   # 是否显示文章内容</span><br><span class="line">  created_at: true  # 是否显示创建时间</span><br><span class="line">  updated_at:  # 是否显示更新时间</span><br><span class="line">    enable: true</span><br><span class="line">    another_day: true</span><br><span class="line">  categories: true  # 是否显示分类</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post wordcount display settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">symbols_count_time:   # 预计阅读时间和文章字数统计</span><br><span class="line">  separated_meta: true ## 是否设置分隔符</span><br><span class="line">  item_text_post: true  ## 本文总字数和阅读时长</span><br><span class="line">  item_text_total: false  ## 本站总字数和阅读时长</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use icon instead of the symbol <span class="comment"># to indicate the tag at the bottom of the post</span></span></span><br><span class="line">tag_icon: true  # 文章底部默认的标签是 # 号</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Reward (Donate)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Front-matter variable (unsupport animation).</span></span><br><span class="line">reward_settings:  # 打赏设置</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, reward will be displayed <span class="keyword">in</span> every article by default.</span></span><br><span class="line">  enable: false  # 是否开启打赏服务</span><br><span class="line">  animation: false# 是否添加动画</span><br><span class="line"><span class="meta">  #</span><span class="bash">comment: Donate comment here.</span></span><br><span class="line"></span><br><span class="line">reward: # 此处是贴上自己的收款码，收款码放置在 images 目录下，然后在此处修改地址</span><br><span class="line"><span class="meta">  #</span><span class="bash">wechatpay: /images/wechatpay.png</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">alipay: /images/alipay.png</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">paypal: /images/paypal.png</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">bitcoin: /images/bitcoin.png</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line">follow_me:  # 是否开启相关文章推荐</span><br><span class="line"><span class="meta">  #</span><span class="bash">Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">RSS: /atom.xml || fa fa-rss</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Related popular posts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line">related_posts:  #相关的文章的推送</span><br><span class="line">  enable: false</span><br><span class="line">  title: # Custom header, leave empty to use the default one</span><br><span class="line">  display_in_home: false</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 5</span><br><span class="line">    #PPMixingRate: 0.0</span><br><span class="line">    #isDate: false</span><br><span class="line">    #isImage: false</span><br><span class="line">    #isExcerpt: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post edit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/hexojs/hexo-deployer-git</span></span><br><span class="line">post_edit:</span><br><span class="line">  enable: false</span><br><span class="line">  url: https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name # Link for view source</span><br><span class="line"><span class="meta">  #</span><span class="bash">url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name <span class="comment"># Link for fork &amp; edit</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Show previous post and next post <span class="keyword">in</span> post footer <span class="keyword">if</span> exists</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Available values: left | right | <span class="literal">false</span></span></span><br><span class="line">post_navigation: left  #上一篇/下一篇文章导航，选择项有 left/right/false</span><br></pre></td></tr></table></figure>

<h3 id="用户界面设置"><a href="#用户界面设置" class="headerlink" title="用户界面设置"></a>用户界面设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Custom Page Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/custom-pages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TagCloud settings <span class="keyword">for</span> tags page.</span></span><br><span class="line">tagcloud: # 标签云界面</span><br><span class="line"><span class="meta">  #</span><span class="bash"> All values below are same as default, change them by yourself.</span></span><br><span class="line">  min: 12 # Minimun font size in px</span><br><span class="line">  max: 30 # Maxium font size in px</span><br><span class="line">  start: &quot;#ccc&quot; # Start color (hex, rgba, hsla or color keywords)</span><br><span class="line">  end: &quot;#111&quot; # End color (hex, rgba, hsla or color keywords)</span><br><span class="line">  amount: 200 # Amount of tags, change it if you have more than 200 tags</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Google Calendar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Share your recent schedule to others via calendar page.</span></span><br><span class="line">calendar: # 日程表界面</span><br><span class="line">  calendar_id: &lt;required&gt; # Your Google account E-Mail</span><br><span class="line">  api_key: &lt;required&gt;</span><br><span class="line">  orderBy: startTime</span><br><span class="line">  offsetMax: 24 # Time Range</span><br><span class="line">  offsetMin: 4 # Time Range</span><br><span class="line">  showDeleted: false</span><br><span class="line">  singleEvents: true</span><br><span class="line">  maxResults: 250</span><br></pre></td></tr></table></figure>

<h3 id="主题框架设置"><a href="#主题框架设置" class="headerlink" title="主题框架设置"></a>主题框架设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Misc Theme Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the text alignment <span class="keyword">in</span> posts / pages.</span></span><br><span class="line">text_align:  # 文本对齐方式，默认居中 justify 即可</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: start | end | left | right | center | justify | justify-all | match-parent</span></span><br><span class="line">  desktop: justify</span><br><span class="line">  mobile: justify</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line">mobile_layout_economy: false   # 移动端是否窄化布局，默认即可</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Android Chrome header panel color (<span class="variable">$brand</span>-<span class="built_in">bg</span> / <span class="variable">$headband</span>-<span class="built_in">bg</span> =&gt; <span class="variable">$black</span>-deep).</span></span><br><span class="line">android_chrome_color: &quot;#222&quot;   # 安卓chrome浏览器颜色，默认即可</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Custom Logo (Do not support scheme Mist)</span></span><br><span class="line">custom_logo: #/uploads/custom-logo.jpg  # 用户 logo ，默认即可</span><br><span class="line"></span><br><span class="line">codeblock:  # 代码块设置</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Code Highlight theme</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  highlight_theme: normal  # 代码高亮主题</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Add copy button on codeblock</span></span><br><span class="line">  copy_button:  # 代码块中的复制按钮</span><br><span class="line">    enable: false</span><br><span class="line">    # Show text copy result.</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Show text copy result.</span></span><br><span class="line">    show_result: false   # 是否显示复制成功/复制失败信息</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:  # 代码块的风格，默认为normal</span><br><span class="line">back2top: # 返回页面顶部按钮</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Back to top <span class="keyword">in</span> sidebar.</span></span><br><span class="line">  sidebar: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Scroll percent label <span class="keyword">in</span> b2t button.</span></span><br><span class="line">  scrollpercent: false  # 显示滚动的百分比</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Reading progress bar</span></span><br><span class="line">reading_progress:   # 阅读进度条</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: top | bottom</span></span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 3px</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bookmark Support</span></span><br><span class="line">bookmark: # 书签，如果开启，则下一次使用的时候就会从你上次浏览的地方显示</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Customize the color of the bookmark.</span></span><br><span class="line">  color: &quot;#222&quot;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  save: auto</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> `Follow me on GitHub` banner <span class="keyword">in</span> the top-right corner.</span></span><br><span class="line">github_banner:   # 在右上角的 github 图标处，点击进入自己的github账户</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/yourname. ## 要修改其链接</span><br><span class="line">  title: Follow me on GitHub</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h3 id="字体设置部分"><a href="#字体设置部分" class="headerlink" title="字体设置部分"></a>字体设置部分</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Font Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/<span class="comment">#Fonts-Customization</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Find fonts on Google Fonts (https://www.google.com/fonts)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> All fonts <span class="built_in">set</span> here will have the following styles:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   light | light italic | normal | normal italic | bold | bold italic</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Be aware that setting too much fonts will cause site running slowly</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To avoid space between header and sidebar <span class="keyword">in</span> scheme Pisces / Gemini, Web Safe fonts are recommended <span class="keyword">for</span> `global` (and `title`):</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font:	# 这一部分是字体设置，如果字体是false，即表示不适用外部字体，使用的是 next 主题默认字体</span><br><span class="line">      # 如果对默认字体感到不合适，可以修改，选择自己找到的字体库，添加链接就可,但是要确保能够访问，</span><br><span class="line">      # 比如谷歌字体库在大陆就无法访问，即使你使用科学上网可以获得资源，但是不能保证你的访问用户能够顺利看到，</span><br><span class="line">      # 关于字体的详细设置请看下面的字体设置篇</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class="line">  host:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Font options:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> `external: <span class="literal">true</span>` will load this font family from `host` above.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> `family: Times New Roman`. Without any quotes.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Global font settings used <span class="keyword">for</span> all elements inside &lt;body&gt;.</span></span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line">    size:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Font settings <span class="keyword">for</span> site title (.site-title).</span></span><br><span class="line">  title:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Font settings <span class="keyword">for</span> headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Font settings <span class="keyword">for</span> posts (.post-body).</span></span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Font settings <span class="keyword">for</span> &lt;code&gt; and code blocks.</span></span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br></pre></td></tr></table></figure>

<h3 id="SEO设置"><a href="#SEO设置" class="headerlink" title="SEO设置"></a>SEO设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SEO Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Disable Baidu transformation on mobile devices.</span></span><br><span class="line">disable_baidu_transformation: false  ## 是否让百度生成百度快照</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If <span class="literal">true</span>, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Remember to <span class="built_in">set</span> up your site-subtitle <span class="keyword">in</span> Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line">index_with_subtitle: false ## 是否把副标题加入index中</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line">exturl: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Google Webmaster tools verification.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://www.google.com/webmasters</span></span><br><span class="line">google_site_verification:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bing Webmaster tools verification.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://www.bing.com/webmaster</span></span><br><span class="line">bing_site_verification:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://webmaster.yandex.ru</span></span><br><span class="line">yandex_site_verification:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://ziyuan.baidu.com/site</span></span><br><span class="line">baidu_site_verification:  ## 百度站长验证</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enable baidu push so that the blog will push the url to baidu automatically <span class="built_in">which</span> is very helpful <span class="keyword">for</span> SEO.</span></span><br><span class="line">baidu_push: false  ## 是否推送到百度让其搜索</span><br></pre></td></tr></table></figure>

<h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>此处不做详细赘述，如果感兴趣可以去搜索相关文章进行设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Comments Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/comments</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> next 主题支持几个评论插件 disqus | disqusjs |gitalk | livere | changyan(china) | valine(china) |</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 而且同时支持多个评论系统</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Multiple Comment System Support</span></span><br><span class="line">comments:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: tabs | buttons</span></span><br><span class="line">  style: tabs</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Choose a comment system to be displayed by default.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class="line">  active:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Setting `<span class="literal">true</span>` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  storage: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Lazyload all comment systems.</span></span><br><span class="line">  lazyload: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Modify texts or order <span class="keyword">for</span> any navs, here are some examples.</span></span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Disqus</span></span><br><span class="line">disqus:</span><br><span class="line">  enable: false</span><br><span class="line">  shortname:</span><br><span class="line">  count: true</span><br><span class="line"><span class="meta">  #</span><span class="bash">post_meta_order: 0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DisqusJS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Alternative Disqus - Render comment component using Disqus API.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Demo: https://suka.js.org/DisqusJS/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://github.com/SukkaW/DisqusJS</span></span><br><span class="line">disqusjs:</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> API Endpoint of Disqus API (https://disqus.com/api/).</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Leave api empty <span class="keyword">if</span> you are able to connect to Disqus API. Otherwise you need a reverse proxy <span class="keyword">for</span> it.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> For example:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> api: https://disqus.skk.moe/disqus/</span></span><br><span class="line">  api:</span><br><span class="line">  apikey: # Register new application from https://disqus.com/api/applications/</span><br><span class="line">  shortname: # See: https://disqus.com/admin/settings/general/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changyan</span></span><br><span class="line">changyan:</span><br><span class="line">  enable: false</span><br><span class="line">  appid:</span><br><span class="line">  appkey:</span><br><span class="line"><span class="meta">  #</span><span class="bash">post_meta_order: 0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Valine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line">valine:</span><br><span class="line">  enable: false</span><br><span class="line">  appid: # Your leancloud application appid</span><br><span class="line">    appkey: # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  language: # Language, available values: en, zh-cn</span><br><span class="line">  visitor: false # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line"><span class="meta">  #</span><span class="bash">post_meta_order: 0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> LiveRe comments system</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid: # &lt;your_uid&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Gitalk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  enable: false</span><br><span class="line">  github_id: # GitHub repo owner</span><br><span class="line">  repo: # Repository name to store issues</span><br><span class="line">  client_id: # GitHub Application Client ID</span><br><span class="line">  client_secret: # GitHub Application Client Secret</span><br><span class="line">  admin_user: # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Gitalk<span class="string">&#x27;s display language depends on user&#x27;</span>s browser or system environment</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If you want everyone visiting your site to see a uniform language, you can <span class="built_in">set</span> a force language value</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<h3 id="文章评价功能"><a href="#文章评价功能" class="headerlink" title="文章评价功能"></a>文章评价功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post Widgets &amp; Content Sharing Services</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/post-widgets</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> next 主题支持两个评估系统： Widgetpack Rating 和 AddThis</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Star rating support to each article.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To get your ID visit https://widgetpack.com</span></span><br><span class="line">rating: # rating 插件设置</span><br><span class="line">  enable: false</span><br><span class="line">  id:     # &lt;app_id&gt;</span><br><span class="line">  color:  fc6423</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> AddThis Share. See: https://www.addthis.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Go to https://www.addthis.com/dashboard to customize your tools.</span></span><br><span class="line">add_this_id: # AddThis 插件设置</span><br></pre></td></tr></table></figure>

<h3 id="文章统计和分析功能"><a href="#文章统计和分析功能" class="headerlink" title="文章统计和分析功能"></a>文章统计和分析功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Statistics and Analytics</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/statistics-and-analytics</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 主要为busuanzi，可以统计网站来访人数</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Google Analytics</span></span><br><span class="line">google_analytics:</span><br><span class="line">  tracking_id: # &lt;app_id&gt;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> By default, NexT will load an external gtag.js script on your site.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If you only need the pageview feature, <span class="built_in">set</span> the following option to <span class="literal">true</span> to get a better performance.</span></span><br><span class="line">  only_pageview: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Baidu Analytics</span></span><br><span class="line">baidu_analytics: # &lt;app_id&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Growingio Analytics</span></span><br><span class="line">growingio_analytics: # &lt;project_id&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CNZZ count</span></span><br><span class="line">cnzz_siteid:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Show number of visitors of each article.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can visit https://leancloud.cn to get AppID and AppKey.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> AppID and AppKey are recommended to be the same as valine<span class="string">&#x27;s for counter compatibility.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Do not enable both `valine.visitor` and `leancloud_visitors`.</span></span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: false</span><br><span class="line">  app_id: # &lt;your app id&gt;</span><br><span class="line">  app_key: # &lt;your app key&gt;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="string"> Required for apps from CN region</span></span></span><br><span class="line">  server_url: # &lt;your server url&gt;</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="string"> Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="string"> If you don&#x27;</span>t care about security <span class="keyword">in</span> leancloud counter and just want to use it directly</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> (without hexo-leancloud-counter-security plugin), <span class="built_in">set</span> `security` to `<span class="literal">false</span>`.</span></span><br><span class="line">  security: true</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Another tool to show number of visitors to each article.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span></span><br><span class="line">firestore:</span><br><span class="line">  enable: false</span><br><span class="line">  collection: articles # Required, a string collection name to access firestore database</span><br><span class="line">  apiKey: # Required</span><br><span class="line">  projectId: # Required</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>

<h3 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Search Services</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/search-services</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> next 主题支持两种站内搜索插件 algolia_search 和 local_search(比较常用);</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Algolia Search</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://www.algolia.com</span></span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span><br><span class="line">    hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Local Search</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If auto, trigger search by changing input.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Preload the search data when the page loads.</span></span><br><span class="line">  preload: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Swiftype Search API Key</span></span><br><span class="line">swiftype_key:</span><br></pre></td></tr></table></figure>

<h3 id="即时聊天功能"><a href="#即时聊天功能" class="headerlink" title="即时聊天功能"></a>即时聊天功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Chat Services</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/chat-services</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> next 主题支持在线聊天服务，支持两个插件 charta 和 tidioA,</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Chatra Support</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://chatra.io</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dashboard: https://app.chatra.io/settings/general</span></span><br><span class="line">chatra:</span><br><span class="line">  enable: false</span><br><span class="line">  async: true</span><br><span class="line">  id: # Visit Dashboard to get your ChatraID</span><br><span class="line"><span class="meta">  #</span><span class="bash">embed: <span class="comment"># Unfinished experimental feature for developers. See: https://chatra.io/help/api/#injectto</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tidio Support</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://www.tidiochat.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dashboard: https://www.tidiochat.com/panel/dashboard</span></span><br><span class="line">tidio:</span><br><span class="line">  enable: false</span><br><span class="line">  key: # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer</span><br></pre></td></tr></table></figure>

<h3 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h3><p>具体参考：<a href="https://hexo.io/zh-cn/docs/tag-plugins">https://hexo.io/zh-cn/docs/tag-plugins</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tags Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://theme-next.org/docs/tag-plugins/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Note tag (bs-callout)</span></span><br><span class="line">note:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Note tag style values:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - simple    bs-callout old alert style. Default.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">  - disabled  <span class="built_in">disable</span> all CSS styles import of note tag.</span></span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Offset lighter of background <span class="keyword">in</span> % <span class="keyword">for</span> modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  light_bg_offset: 0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Tabs tag</span></span><br><span class="line">tabs:</span><br><span class="line">  transition:</span><br><span class="line">    tabs: false</span><br><span class="line">    labels: true</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> PDF tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NexT will try to load pdf files natively, <span class="keyword">if</span> failed, pdf.js will be used.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> So, you have to install the dependency of pdf.js <span class="keyword">if</span> you want to use pdf tag and make it available to all browsers.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See: https://github.com/theme-next/theme-next-pdf</span></span><br><span class="line">pdf:</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Default height</span></span><br><span class="line">  height: 500px</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Available themes: default | dark | forest | neutral</span></span><br><span class="line">  theme: forest	</span><br></pre></td></tr></table></figure>

<h3 id="动画设置"><a href="#动画设置" class="headerlink" title="动画设置"></a>动画设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Animation Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use velocity to animate everything.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: http://velocityjs.org</span></span><br><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: false</span><br><span class="line">  transition:</span><br><span class="line">    # Transition variants:</span><br><span class="line">    # fadeIn | flipXIn | flipYIn | flipBounceXIn | flipBounceYIn</span><br><span class="line">    # swoopIn | whirlIn | shrinkIn | expandIn</span><br><span class="line">    # bounceIn | bounceUpIn | bounceDownIn | bounceLeftIn | bounceRightIn</span><br><span class="line">    # slideUpIn | slideDownIn | slideLeftIn | slideRightIn</span><br><span class="line">    # slideUpBigIn | slideDownBigIn | slideLeftBigIn | slideRightBigIn</span><br><span class="line">    # perspectiveUpIn | perspectiveDownIn | perspectiveLeftIn | perspectiveRightIn</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: slideDownIn</span><br><span class="line">    post_body: slideDownIn</span><br><span class="line">    coll_header: slideLeftIn</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: slideUpIn</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Progress bar <span class="keyword">in</span> the top during page loading.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://github.com/HubSpot/pace</span></span><br><span class="line">pace:</span><br><span class="line">  enable: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Themes list:</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  theme: minimal</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> JavaScript 3D library.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  three_waves: true</span><br><span class="line">  canvas_lines: false</span><br><span class="line">  canvas_sphere: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Canvas-ribbon</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> For more information: https://github.com/zproo/canvas-ribbon</span></span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 300 # The width of the ribbon</span><br><span class="line">  alpha: 0.6 # The transparency of the ribbon</span><br><span class="line">  zIndex: -1 # The display level of the ribbon</span><br></pre></td></tr></table></figure>

<p>参考资料：<a href="https://www.icode9.com/content-4-624876.html">https://www.icode9.com/content-4-624876.html</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基础</title>
    <url>/Hexo/Hexo%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>官方中文文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li>Nodejs</li>
<li>Git</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>先建立自己的博客所在文件夹&lt;folder&gt;：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml  # 站点配置文件</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>_config.yml</strong></li>
</ul>
<p>主目录下的_config.yml文件为站点配置文件，而theme主题下的_config.yml为主题配置文件</p>
<ul>
<li><strong>package.json</strong></li>
</ul>
<p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">package.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>scaffolds</strong></li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<p>这个目录很重要，新建的文章都是在保存在这个目录下的，有两个子目录：<code>_drafts</code>，<code>_posts</code>。需要新建的博文都放在<code>_posts</code>目录下。  </p>
<p><code>_posts</code>目录下是一个个<code>markdown</code>文件。你应该可以看到一个<code>hello-world.md</code>的文件，文章就在这个文件中编辑。  </p>
<p><code>_posts</code>目录下的md文件，会被编译成html文件，放到<code>public</code>（此文件现在应该没有，因为你还没有编译过）文件夹下。</p>
<p>包含以下三个文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">draft.md  page.md  post.md</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>source</strong></li>
</ul>
<p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<ul>
<li><strong>themes</strong></li>
</ul>
<p>主题文件夹。Hexo 会根据主题来生成静态页面。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>可以在 <code>_config.yml</code> 中修改大部分的配置。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><p>网站配置:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title: 阿狒的博客</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: 热爱生活的人必定不会被生活所抛弃</span><br><span class="line">keywords: 独行者</span><br><span class="line">author: SZX</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><p>网址配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> URL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span></span><br><span class="line">url: http://example.com</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td>
<td></td>
</tr>
<tr>
<td><code>root</code></td>
<td>网站根目录</td>
<td><code>url&#39;s pathname</code></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td>
<td><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td><code>permalink_defaults</code></td>
<td>永久链接中各部分的默认值</td>
<td></td>
</tr>
<tr>
<td><code>pretty_urls</code></td>
<td>改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td>
<td></td>
</tr>
<tr>
<td><code>pretty_urls.trailing_index</code></td>
<td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>pretty_urls.trailing_html</code></td>
<td>是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td>
<td><code>true</code></td>
</tr>
</tbody></table>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>目录配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Directory</span></span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>source_dir</code></td>
<td>资源文件夹，这个文件夹用来存放内容。</td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>public_dir</code></td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td><code>public</code></td>
</tr>
<tr>
<td><code>tag_dir</code></td>
<td>标签文件夹</td>
<td><code>tags</code></td>
</tr>
<tr>
<td><code>archive_dir</code></td>
<td>归档文件夹</td>
<td><code>archives</code></td>
</tr>
<tr>
<td><code>category_dir</code></td>
<td>分类文件夹</td>
<td><code>categories</code></td>
</tr>
<tr>
<td><code>code_dir</code></td>
<td>Include code 文件夹，<code>source_dir</code> 下的子目录</td>
<td><code>downloads/code</code></td>
</tr>
<tr>
<td><code>i18n_dir</code></td>
<td>国际化（i18n）文件夹</td>
<td><code>:lang</code></td>
</tr>
<tr>
<td><code>skip_render</code></td>
<td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td></td>
</tr>
</tbody></table>
<h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>文章配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Writing</span></span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: true # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>new_post_name</code></td>
<td>新文章的文件名称</td>
<td>:title.md</td>
</tr>
<tr>
<td><code>default_layout</code></td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td><code>auto_spacing</code></td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td><code>titlecase</code></td>
<td>把标题转换为 title case</td>
<td>false</td>
</tr>
<tr>
<td><code>external_link</code></td>
<td>在新标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td><code>external_link.enable</code></td>
<td>在新标签中打开链接</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>external_link.field</code></td>
<td>对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td>
<td><code>site</code></td>
</tr>
<tr>
<td><code>external_link.exclude</code></td>
<td>需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td>
<td><code>[]</code></td>
</tr>
<tr>
<td><code>filename_case</code></td>
<td>把文件名称转换为 (1) 小写或 (2) 大写</td>
<td>0</td>
</tr>
<tr>
<td><code>render_drafts</code></td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td><code>post_asset_folder</code></td>
<td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td>
<td>false</td>
</tr>
<tr>
<td><code>relative_link</code></td>
<td>把链接改为与根目录的相对位址</td>
<td>false</td>
</tr>
<tr>
<td><code>future</code></td>
<td>显示未来的文章</td>
<td>true</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td>
<td></td>
</tr>
<tr>
<td><code>prismjs</code></td>
<td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td>
<td></td>
</tr>
</tbody></table>
<h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>default_category</code></td>
<td>默认分类</td>
<td><code>uncategorized</code></td>
</tr>
<tr>
<td><code>category_map</code></td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td><code>tag_map</code></td>
<td>标签别名</td>
<td></td>
</tr>
</tbody></table>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>配置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Pagination</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set per_page to 0 to disable pagination</span></span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>per_page</code></td>
<td>每页显示的文章量 (0 = 关闭分页功能)</td>
<td><code>10</code></td>
</tr>
<tr>
<td><code>pagination_dir</code></td>
<td>分页目录</td>
<td><code>page</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Samtools</title>
    <url>/%E7%94%9F%E4%BF%A1/Samtools/</url>
    <content><![CDATA[<p>​    samtools是一个用于操作sam和bam文件的工具合集。能够实现二进制查看、格式转换、排序及合并等功能，结合sam格式中的flag、tag等信息，还可以完成比对结果的统计汇总。同时利用linux中的grep、awk等操作命令，还可以大大扩展samtools的使用范围与功能。包含有许多命令。</p>
<span id="more"></span>

<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol>
<li><p>conda安装</p>
</li>
<li><p>GitHub安装</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/biosoft/samtools</span><br><span class="line">cd ~/biosoft/samtools</span><br><span class="line">wget -c https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包</span></span><br><span class="line">tar jxvf samtools-1.9.tar.bz2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装samtool</span></span><br><span class="line">./configure --prefix=/home/vip47/biosoft/samtools-1.9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对其进行编译</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">调 用方式</span></span><br><span class="line">./samtools --help</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 置入环境变量</span></span><br><span class="line">echo &#x27;export PATH=&quot;/home/vip47/biosoft/samtools-1.9/bin:$PATH&quot; &#x27; &gt;&gt;~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Samtool工具包"><a href="#Samtool工具包" class="headerlink" title="Samtool工具包"></a>Samtool工具包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">samtools</span></span><br><span class="line"></span><br><span class="line">Program: samtools (Tools for alignments in the SAM format)</span><br><span class="line">Version: 1.9 (using htslib 1.9)</span><br><span class="line"></span><br><span class="line">Usage:   samtools &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  -- Indexing</span><br><span class="line">     dict           create a sequence dictionary file</span><br><span class="line">     faidx          index/extract FASTA</span><br><span class="line">     fqidx          index/extract FASTQ</span><br><span class="line">     index          index alignment</span><br><span class="line"></span><br><span class="line">  -- Editing</span><br><span class="line">     calmd          recalculate MD/NM tags and &#x27;=&#x27; bases</span><br><span class="line">     fixmate        fix mate information</span><br><span class="line">     reheader       replace BAM header</span><br><span class="line">     targetcut      cut fosmid regions (for fosmid pool only)</span><br><span class="line">     addreplacerg   adds or replaces RG tags</span><br><span class="line">     markdup        mark duplicates</span><br><span class="line"></span><br><span class="line">  -- File operations</span><br><span class="line">     collate        shuffle and group alignments by name</span><br><span class="line">     cat            concatenate BAMs</span><br><span class="line">     merge          merge sorted alignments</span><br><span class="line">     mpileup        multi-way pileup</span><br><span class="line">     sort           sort alignment file</span><br><span class="line">     split          splits a file by read group</span><br><span class="line">     quickcheck     quickly check if SAM/BAM/CRAM file appears intact</span><br><span class="line">     fastq          converts a BAM to a FASTQ</span><br><span class="line">     fasta          converts a BAM to a FASTA</span><br><span class="line"></span><br><span class="line">  -- Statistics</span><br><span class="line">     bedcov         read depth per BED region</span><br><span class="line">     depth          compute the depth</span><br><span class="line">     flagstat       simple stats</span><br><span class="line">     idxstats       BAM index stats</span><br><span class="line">     phase          phase heterozygotes</span><br><span class="line">     stats          generate stats (former bamcheck)</span><br><span class="line"></span><br><span class="line">  -- Viewing</span><br><span class="line">     flags          explain BAM flags</span><br><span class="line">     tview          text alignment viewer</span><br><span class="line">     view           SAM&lt;-&gt;BAM&lt;-&gt;CRAM conversion</span><br><span class="line">     depad          convert padded BAM to unpadded BAM</span><br></pre></td></tr></table></figure>

<p>​    从上面我们可以看到，大致我5类命令块：<code>Indexing</code>,<code>Editing</code>,<code>File operations</code>,<code>Statistics</code>,<code>Viewing</code>，下面我们来看看几个常用的命令</p>
<h3 id="1-view"><a href="#1-view" class="headerlink" title="1.view"></a>1.view</h3><p>​    view命令的主要功能是：将sam文件与bam文件互换；然后对bam文件进行各种操作，比如数据的排序(sort)和提取(这些操作是对bam文件进行的，因而当输入为sam文件的时候，不能进行该操作)；最后将排序或提取得到的数据输出为bam或sam（默认的）格式。</p>
<p>​    bam文件优点：bam文件为二进制文件，占用的磁盘空间比sam文本文件小；利用bam二进制文件的运算速度快。</p>
<p>​    view命令中，对sam文件头部（序列ID）的输入(-t或-T）和输出(-h)是单独的一些参数来控制的。</p>
<blockquote>
<p><code>Usage: samtools view [options] | [region1 [...]]</code></p>
<p>下面的view命令的部分参数</p>
<p>默认情况下不加 region，则是输出所有的 region.options:</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Options: -b       output BAM </span><br><span class="line">									# 输出文件格式为BAM</span><br><span class="line">         -h       print header for the SAM output </span><br><span class="line">         					# 默认下输出的 sam 格式文件不带 header，该参数设定输出sam文件时带 header 信息</span><br><span class="line">         -H       print header only (no alignments) </span><br><span class="line">         					# 仅仅输出头部文件</span><br><span class="line">         -S       input is SAM </span><br><span class="line">         					#输入文件格式为SAM</span><br><span class="line">         -u       uncompressed BAM output (force -b)  </span><br><span class="line">         					# 该参数的使用需要有-b参数，能节约时间，但是需要更多磁盘空间。 </span><br><span class="line">         -1       fast compression (force -b)	</span><br><span class="line">         					# 快速压缩格式</span><br><span class="line">         -x       output FLAG in HEX (samtools-C specific)</span><br><span class="line">         -X       output FLAG in string (samtools-C specific)</span><br><span class="line">         -c       print only the count of matching records</span><br><span class="line">         					# 仅输出匹配的统计记录 </span><br><span class="line">         -B       collapse the backward CIGAR operation</span><br><span class="line">         -@ INT   number of BAM compression threads [0]</span><br><span class="line">         					# 指使用的线程数</span><br><span class="line">         -L FILE  output alignments overlapping the input BED FILE [null]</span><br><span class="line">         					# 仅包括和bed文件存在overlap的reads</span><br><span class="line">         -t FILE  list of reference names and lengths (force -S) [null]</span><br><span class="line">         					# 使用一个list文件来作为header的输入</span><br><span class="line">         -T FILE  reference sequence file (force -S) [null]</span><br><span class="line">         					# 使用序列fasta文件作为header的输入</span><br><span class="line">         -o FILE  output file name [stdout]</span><br><span class="line">         					# 使用序列fasta文件作为header的输入</span><br><span class="line">         -R FILE  list of read groups to be outputted [null]</span><br><span class="line">         -f INT   required flag, 0 for unset [0]</span><br><span class="line">         					## 所选择的flag值</span><br><span class="line">         -F INT   filtering flag, 0 for unset [0]</span><br><span class="line">         					## 不需要的flag值</span><br><span class="line">         -q INT   minimum mapping quality [0]</span><br><span class="line">         					# 比对的最低质量值，一般认为20就为unique比对了，可以结合上述-bF参数使用使用提取特定的比对结果</span><br><span class="line">         -l STR   only output reads in library STR [null]</span><br><span class="line">         -r STR   only output reads in read group STR [null]</span><br><span class="line">         -s FLOAT fraction of templates to subsample; integer part as seed [-1]</span><br><span class="line">         -?       longer help</span><br></pre></td></tr></table></figure>

<p>一些实例；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将sam文件转换成bam文件</span></span><br><span class="line">samtools view -bS abc.sam &gt; abc.bam</span><br><span class="line"></span><br><span class="line"><span class="comment"># BAM转换为SAM</span></span><br><span class="line">samtools view -h -o out.sam out.bam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取比对到参考序列上的比对结果</span></span><br><span class="line">samtools view -bF 4 abc.bam &gt; abc.F.bam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取paired reads中两条reads都比对到参考序列上的比对结果，只需要把两个4+8的值12作为过滤参数即可</span></span><br><span class="line">samtools view -bF 12 abc.bam &gt; abc.F12.bam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取没有比对到参考序列上的比对结果</span></span><br><span class="line">samtools view -bf 4 abc.bam &gt; abc.f.bam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取bam文件中比对到caffold1上的比对结果，并保存到sam文件格式</span></span><br><span class="line">samtools view abc.bam scaffold1 &gt; scaffold1.sam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取scaffold1上能比对到30k到100k区域的比对结果</span></span><br><span class="line">samtools view abc.bam scaffold1:30000-100000 <span class="variable">$gt</span>; scaffold1_30k-100k.sam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据fasta文件，将 header 加入到 sam 或 bam 文件中</span></span><br><span class="line">samtools view -T genome.fasta -h scaffold1.sam &gt; scaffold1.h.sam</span><br></pre></td></tr></table></figure>

<h3 id="2-sort"><a href="#2-sort" class="headerlink" title="2. sort"></a>2. sort</h3><p>​    sort对bam文件进行排序。(sam文件无法排序)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: samtools sort [option] &lt;in.bam&gt; -o &lt;out.prefix&gt;  </span><br><span class="line"></span><br><span class="line">-n Sort by <span class="built_in">read</span> name</span><br><span class="line"><span class="comment">#设定排序方式按short reads的ID排序。默认下是按序列在fasta文件中的顺序（即header）和序列从左往右的位点排序。</span></span><br><span class="line">-m INT     Set maximum memory per thread; suffix K/M/G recognized [768M]</span><br><span class="line"><span class="comment"># 设置每个线程的最大内存，单位可以是K/M/G，默认是 768M。对于处理大数据时，如果内存够用，则设置大点的值，以节约时间。</span></span><br><span class="line">-t TAG     Sort by value of TAG. Uses position as secondary index (or <span class="built_in">read</span> name <span class="keyword">if</span> -n is <span class="built_in">set</span>)</span><br><span class="line"><span class="comment"># 按照TAG值排序</span></span><br><span class="line">-o FILE    Write final output to FILE rather than standard output </span><br><span class="line"><span class="comment"># 输出到文件中，加文件名</span></span><br></pre></td></tr></table></figure>

<h3 id="3-merge和cat"><a href="#3-merge和cat" class="headerlink" title="3.merge和cat"></a>3.merge和cat</h3><p>​    merge将多个已经sort了的bam文件融合成一个bam文件。融合后的文件则是已经sort过了的。而cat命令不需要将bam文件进行sort。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: samtools merge [-nurlf] [-h inh.sam] [-b &lt;bamlist.fofn&gt;] &lt;out.bam&gt; &lt;in1.bam&gt; [&lt;in2.bam&gt; ... &lt;inN.bam&gt;]</span><br><span class="line"></span><br><span class="line">Options: </span><br><span class="line">  -n         Input files are sorted by read name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入文件是经过sort -n的</span></span><br><span class="line">  -t TAG     Input files are sorted by TAG value</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入文件是经过sort -t的</span></span><br><span class="line">  -r         Attach RG tag (inferred from file names)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加上RG标签</span></span><br><span class="line">  -u         Uncompressed BAM output</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出未压缩的bam</span></span><br><span class="line">  -f         Overwrite the output BAM if exist</span><br><span class="line"><span class="meta">#</span><span class="bash"> 覆盖已经存在的bam</span></span><br><span class="line">  -1         Compress level 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1倍压缩</span></span><br><span class="line">  -l INT     Compression level, from 0 to 9 [-1]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定压缩倍数</span></span><br><span class="line">  -R STR     Merge file in the specified region STR [all]</span><br><span class="line">  -h FILE    Copy the header in FILE to &lt;out.bam&gt; [in1.bam]</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">samtools cat</span></span><br><span class="line">Usage: samtools cat [options] &lt;in1.bam&gt;  [... &lt;inN.bam&gt;]</span><br><span class="line">       samtools cat [options] &lt;in1.cram&gt; [... &lt;inN.cram&gt;]</span><br><span class="line"></span><br><span class="line">Options: -b FILE  list of input BAM/CRAM file names, one per line</span><br><span class="line">         -h FILE  copy the header from FILE [default is 1st input file]</span><br><span class="line">         -o FILE  output BAM/CRAM</span><br></pre></td></tr></table></figure>

<h3 id="4-index"><a href="#4-index" class="headerlink" title="4.index"></a>4.index</h3><p>​    对排序后的序列建立索引，并输出为bai文件，用于快速随机处理。在很多情况下，特别是需要显示比对序列的时候，bai文件是必不可少的，例如之后的tview命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: samtools index &lt;in.bam&gt; [out.index]</span><br><span class="line"></span><br><span class="line">samtools index abc.sort.bam</span><br></pre></td></tr></table></figure>

<h3 id="5-faidx"><a href="#5-faidx" class="headerlink" title="5. faidx"></a>5. faidx</h3><p>​    对<code>fasta</code>文件建立索引,生成的索引文件以<code>.fai</code>后缀结尾。该命令也能依据索引文件快速提取<code>fasta</code>文件中的某一条（子）序列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: samtools faidx &lt;file.fa|file.fa.gz&gt; [&lt;reg&gt; [...]]samtools faidx &lt;file.fa|file.fa.gz&gt; [&lt;reg&gt; [...]]</span><br></pre></td></tr></table></figure>

<h3 id="6-tview"><a href="#6-tview" class="headerlink" title="6. tview"></a>6. tview</h3><p>​    tview能直观的显示出reads比对基因组的情况，和基因组浏览器有点类似。可视化一般用IGV比较好，不建议用tview</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: samtools tview &lt;aln.bam&gt; [ref.fasta]</span><br></pre></td></tr></table></figure>

<p>​    当给出参考基因组的时候，会在第一排显示参考基因组的序列，否则，第一排全用N表示。</p>
<ul>
<li>按下 g ，则提示输入要到达基因组的某一个位点。例子“scaffold_10:1000”表示到达第10号scaffold的第1000个碱基位点处。</li>
<li>使用H(左）J（ 上）K（下）L（右）移动显示界面。大写字母移动快，小写字母移动慢。</li>
<li>使用空格建向左快速移动（和 L 类似），使用Backspace键向左快速移动（和 H 类似）。</li>
<li>Ctrl+H 向左移动1kb碱基距离； Ctrl+L 向右移动1kb碱基距离</li>
<li>可以用颜色标注比对质量，碱基质量，核苷酸等。30～40的碱基质量或比对质量使用白色表示；<ul>
<li>20～30黄色；10～20绿色；0～10蓝色。</li>
<li>使用点号‘.‘切换显示碱基和点号；使用r切换显示read name等</li>
</ul>
</li>
</ul>
<p>还有很多其它的使用说明，具体按 ？ 键来查看。 </p>
<h3 id="7-flagstat"><a href="#7-flagstat" class="headerlink" title="7. flagstat"></a>7. flagstat</h3><p>​    给出BAM文件的比对结果，并输出比对统计结果。除了<code>-@</code>参数指定线程，没有其他的参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: samtools flagstat [options] &lt;in.bam&gt;</span><br><span class="line"></span><br><span class="line">samtools flagstat tmp.bam </span><br><span class="line">20000 + 0 in total (QC-passed reads + QC-failed reads)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 总共的reads数</span></span><br><span class="line">0 + 0 secondary</span><br><span class="line">0 + 0 supplementary</span><br><span class="line">0 + 0 duplicates</span><br><span class="line">18995 + 0 mapped (94.98% : N/A)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 总体上reads的匹配率</span></span><br><span class="line">20000 + 0 paired in sequencing</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有多少reads是属于paired reads</span></span><br><span class="line">10000 + 0 read1</span><br><span class="line"><span class="meta">#</span><span class="bash"> reads1中的reads数</span></span><br><span class="line">10000 + 0 read2</span><br><span class="line"><span class="meta">#</span><span class="bash"> reads2中的reads数</span></span><br><span class="line">18332 + 0 properly paired (91.66% : N/A)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 完美匹配的reads数和比例：比对到同一条参考序列，并且两条reads之间的距离符合设置的阈值</span></span><br><span class="line">18416 + 0 with itself and mate mapped</span><br><span class="line"><span class="meta">#</span><span class="bash"> paired reads中两条都比对到参考序列上的reads数</span></span><br><span class="line">579 + 0 singletons (2.90% : N/A)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单独一条匹配到参考序列上的reads数，和上一个相加，则是总的匹配上的reads数。</span></span><br><span class="line">0 + 0 with mate mapped to a different chr</span><br><span class="line"><span class="meta">#</span><span class="bash"> paired reads中两条分别比对到两条不同的参考序列的reads数</span></span><br><span class="line">0 + 0 with mate mapped to a different chr (mapQ&gt;=5)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同上一个，只是其中比对质量&gt;=5的reads的数量</span></span><br></pre></td></tr></table></figure>

<h3 id="8-depth"><a href="#8-depth" class="headerlink" title="8. depth"></a>8. depth</h3><p>​    得到每个碱基位点的测序深度，并输出到标准输出。输入的bam文件必须先做samtools index</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  samtools depth [-r reg] [-q baseQthres] [-Q mapQthres] [-b in.bed] &lt;in1.bam&gt; [...]</span><br><span class="line">-r &lt;chr:from-to&gt;    region</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后面跟染色体号（region）</span></span><br><span class="line">-a  output all positions (including zero depth)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入所有位置的序列，包括测序深度为0的</span></span><br><span class="line">-q &lt;int&gt;    base quality threshold [0]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 碱基质量阈值</span></span><br><span class="line">-Q &lt;int&gt;    mapping quality threshold [0]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比对的质量阈值</span></span><br></pre></td></tr></table></figure>

<h3 id="9-将bam文件转换为fastq文件"><a href="#9-将bam文件转换为fastq文件" class="headerlink" title="9. 将bam文件转换为fastq文件"></a>9. 将bam文件转换为fastq文件</h3><p>有时候，我们需要提取出比对到一段参考序列的reads，进行小范围的分析，以利于debug等。这时需要将bam或sam文件转换为fastq格式。<br>该网站提供了一个bam转换为fastq的程序：<a href="https://links.jianshu.com/go?to=http://www.hudsonalpha.org/gsl/information/software/bam2fastq">http://www.hudsonalpha.org/gsl/information/software/bam2fastq</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.hudsonalpha.org/gsl/static/software/bam2fastq-1.1.0.tgz</span><br><span class="line">tar zxf bam2fastq-1.1.0.tgz</span><br><span class="line"><span class="built_in">cd</span> bam2fastq-1.1.0</span><br><span class="line">make</span><br><span class="line">./bam2fastq &lt;in.bam&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-mpileup"><a href="#10-mpileup" class="headerlink" title="10. mpileup"></a>10. mpileup</h3><p>​    samtools还有个非常重要的命令mpileup，以前为pileup。该命令用于生成bcf文件，再使用bcftools进行SNP和Indel的分析。bcftools是samtool中附带的软件，在samtools的安装文件夹中可以找到。<br> 用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: samtools mpileup [-EBug] [-C capQcoef] [-r reg] [-f in.fa] [-l list] [-M capMapQ] [-Q minBaseQ] [-q minMapQ] in.bam [in2.bam [...]]</span><br></pre></td></tr></table></figure>

<p>最常用的参数有2：</p>
<ul>
<li>-f 来输入有索引文件的fasta参考 序列；</li>
<li>-g 输出到bcf格式。用法和最简单的例子如下\</li>
</ul>
<p>​    mpileup不使用-u或-g参数时，则不生成二进制的bcf文件，而生成一个文本文件(输出到标准输出)。该文本文件统计了参考序列中每个碱基位点的比对情况；该文件每一行代表了参考序列中某一个碱基位点的比对结果。比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scaffold_1      2841    A       11      ,,,...,....     BHIGDGIJ?FF</span><br><span class="line">scaffold_1      2842    C       12      ,$,,...,....^I. CFGEGEGGCFF+</span><br><span class="line">scaffold_1      2843    G       11      ,,...,.....     FDDDDCD?DD+</span><br><span class="line">scaffold_1      2844    G       11      ,,...,.....     FA?AAAA&lt;AA+</span><br><span class="line">scaffold_1      2845    G       11      ,,...,.....     F656666166*</span><br><span class="line">scaffold_1      2846    A       11      ,,...,.....     (1.1111)11*</span><br><span class="line">scaffold_1      2847    A       11      ,,+9acggtgaag.+9ACGGTGAAT.+9ACGGTGAAG.+9ACGGTGAAG,+9acggtgaag.+9ACGGTGAAG.+9ACGGTGAAG.+9ACGGTGAAG.+9ACGGTGAAG.+9ACGGTGAAG       %.+....-..)</span><br><span class="line">scaffold_1      2848    N       11      agGGGgGGGGG     !!$!!!!!!!!</span><br><span class="line">scaffold_1      2849    A       11      c$,...,.....    !0000000000</span><br><span class="line">scaffold_1      2850    A       10      ,...,.....      353333333</span><br></pre></td></tr></table></figure>

<blockquote>
<p>mpileup生成的结果包含6列：参考序列名；位置；参考碱基；比对上的reads数；比对情况；比对上的碱基的质量。其中第5列比较复杂,解释如下：<br>1 ‘.’代表与参考序列正链匹配。<br>2 ‘,’代表与参考序列负链匹配。<br>3 ‘ATCGN’代表在正链上的不匹配。<br>4 ‘atcgn’代表在负链上的不匹配。<br>5 ‘*’代表模糊碱基<br>6 ‘’ 代表匹配的碱基是一个read的开始；’‘ 后面紧跟的ascii码减去33代表比对质量；这两个符号修饰的是后面的碱基，其后紧跟的碱基(.,ATCGatcgNn)代表该read的第一个碱基。<br>7 ‘$’代表一个read的结束，该符号修饰的是其前面的碱基。<br>8 正则式’+[0-9]+[ACGTNacgtn]+’代表在该位点后插入的碱基；比如上例中在scaffold_1的2847后插入了9个长度的碱基acggtgaag。表明此处极可能是indel。<br>9 正则式’-[0-9]+[ACGTNacgtn]+’代表在该位点后缺失的碱基；</p>
</blockquote>
<h3 id="11-samtools-rmdup"><a href="#11-samtools-rmdup" class="headerlink" title="11. samtools rmdup"></a>11. samtools rmdup</h3><p>​    NGS上机测序前需要进行PCR一步，使一个模板扩增出一簇，从而在上机测序的时候表现出为1个点，即一个reads。若一个模板扩增出了多簇，结 果得到了多个reads，这些reads的坐标(coordinates)是相近的。在进行了reads比对后需要将这些由PCR duplicates获得的reads去掉，并只保留最高比对质量的read。使用rmdup命令即可完成.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  samtools rmdup [-sS]  </span><br><span class="line">-s rmdup for SE reads</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对single-end reads。默认情况下，只对paired-end reads</span></span><br><span class="line">-S treat PE reads as SE in rmdup (force -s)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将Paired-end reads作为single-end reads处理。</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>生信</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>基础软件</tag>
      </tags>
  </entry>
  <entry>
    <title>csvtk</title>
    <url>/%E7%94%9F%E4%BF%A1/csvtk/</url>
    <content><![CDATA[<h3 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1.背景介绍"></a>1.背景介绍</h3><p>​    CSV/TSV作为数据科学和组学分析的基本格式，其实本质上均为txt格式的表格，CSV是按逗号分隔，TSV是以制表符分隔的表格。这两种格式数据格式应用非常广泛。比较常用的处理软件包括：</p>
<ul>
<li>Excel为代表的电子表格软件</li>
<li>Notepad++/Edit-plus等文本编辑器</li>
<li>sed/awk/cut等Shell命令</li>
<li>各种编程语言，例如 R、python等。<span id="more"></span></li>
</ul>
<p>​    <strong>csvtk</strong>软件用GO语言编写，是一个支持多平台(Winodws/Mac/Linux)的小工具，支持格式除了这两种格式外还可以处理gzip压缩的格式。无需解压即用。27个子命令支持管道组合使用，支持简单的出图。</p>
<p>参考软件[官方教程][ <a href="https://bioinf.shenwei.me/csvtk/usage]">https://bioinf.shenwei.me/csvtk/usage]</a></p>
<hr>
<h3 id="2-工具安装"><a href="#2-工具安装" class="headerlink" title="2.工具安装"></a>2.工具安装</h3><p>软件主页：<a href="https://github.com/shenwei356/csvtk">https://github.com/shenwei356/csvtk</a></p>
<p>软件下载：<a href="https://github.com/shenwei356/csvtk/releases/">https://github.com/shenwei356/csvtk/releases/</a></p>
<p>各系统版本都下，下载解压即可使用。</p>
<p>可选使用conda安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install csvtk</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-参数介绍"><a href="#3-参数介绍" class="headerlink" title="3.参数介绍"></a>3.参数介绍</h3><h5 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h5><ul>
<li>headers 打印标题行，如果表格列比较多，首先查看列名方便后续操作</li>
<li>stats 基本统计分析</li>
<li>stats2 对指定的列进行基本统计，注意需要是数值列</li>
</ul>
<h5 id="格式转化"><a href="#格式转化" class="headerlink" title="格式转化"></a>格式转化</h5><ul>
<li>pretty 转为美观、可读性强的格式，用于打印</li>
<li>csv2tab 转CSV为TSV</li>
<li>tab2csv 转TSV为CSV</li>
<li>space2tab 转空格分割格式为TSV</li>
<li>transpose 转置CSV/TSV 这一个步骤往往看看出来工具好不好用</li>
<li>csv2md 转CSV/TSV为makrdown格式，方便我们多平台排版，发文</li>
</ul>
<h5 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h5><ul>
<li>head 屏幕打印表格前面的内容，可以指定行数</li>
<li>sample 按比例随机采样 对行进行抽样</li>
<li>cut 选择特定列，支持按列或列名进行基本选择、范围选择、模糊选择、负向选择（最常用命令之一，非常强大）</li>
<li>uniq 无须排序，返回按指定（多）列作为key的唯一记录</li>
<li>freq 按指定（多）列进行计数（常用）</li>
<li>inter 多个文件的交集</li>
<li>grep 指定（多）列为Key进行搜索（最常用命令之一，可按指定列搜索）</li>
<li>filter 按指定（多）列的数值进行过滤</li>
<li>filter2 用类似awk的数值/表达式，按指定（多）列的数值进行过滤</li>
<li>join 合并多个文件（常用）</li>
</ul>
<h5 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h5><ul>
<li>rename 直接重命名指定（多）列名</li>
<li>rename2 以正则表达式重命名指定（多）列名</li>
<li>replace 以正则表达式对指定（多）列进行替换编辑（最常用命令之一，可按指定列编辑）</li>
<li>mutate 以正则表达式基于已有列创建新的一列（常用于生成多列测试数据）</li>
<li>mutate2 用类似awk的数值/表达式，以正则表达式基于已有（多）列创建新的一列（常用）</li>
<li>gather 类似于R里面tidyr包的gather方法</li>
</ul>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><ul>
<li>sort 按指定（多）列进行排序</li>
</ul>
<h5 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h5><ul>
<li>plot 基本绘图</li>
<li>plot hist histogram 直方图</li>
<li>plot box boxplot 箱线图</li>
<li>plot line line plot and scatter plot 线图和散点图</li>
</ul>
<h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><ul>
<li>version 版本信息和检查新版本</li>
<li>genautocomplete 生成支持Bash自动补全的配置文件，重启Terminal生效。</li>
</ul>
<h5 id="使用前注意事项"><a href="#使用前注意事项" class="headerlink" title="使用前注意事项"></a>使用前注意事项</h5><ul>
<li>输入数据要求每行的列数一致，空行也会报错</li>
<li>csvtk默认输入数据含有标题行，如没有请开启全局参数-H</li>
<li>csvtk默认输入数据为CSV格式，如为TSV请开启全局参数-t</li>
<li>输入数据列名最好唯一无重复</li>
<li>如果TSV中存在双引号””，请开启全局参数-l</li>
<li>csvtk默认以#开始的为注释行，若标题行含#，请给全局参数-C指定另一个不常见的字符（如$）</li>
</ul>
<hr>
<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4.实战"></a>4.实战</h3><h5 id="1-Pretty表格美化"><a href="#1-Pretty表格美化" class="headerlink" title="1.Pretty表格美化"></a>1.Pretty表格美化</h5><p>​    csvtk pretty让打印出来的内容排版更加美丽，其实对于tsv文件影响不大，要加上全局参数-t，但是对于csv文件影响还是挺大的。</p>
<p><code>注意</code>:csvtk主要用于处理<strong>csv</strong>数据，对于<del>txt</del>数据尽量转化为csv数据整理，否则好多操作都不能实现。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 预览csv</span></span><br><span class="line">head -n3 metadata.csv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SampleID,Group,Date,Site,Sequencing,Platform,Species,Batch,BarcodeSequence,LinkerPrimerSequence,ReversePrimer</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> KO1,KO,2017/6/30,Beijing,BGI,HiSeq2500,Arabidopsis,1,ACGCTCGACA,AACMGGATTAGATACCCKG,ACGTCATCCCCACCTTCC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> KO2,KO,2017/6/30,Beijing,BGI,HiSeq2500,Arabidopsis,1,ATCAGACACG,AACMGGATTAGATACCCKG,ACGTCATCCCCACCTTCC</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可视化csv</span></span><br><span class="line">csvtk pretty metadata.csv|head -n3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SampleID   Group   Date        Site      Sequencing   Platform    Species       Batch   BarcodeSequence   LinkerPrimerSequence   ReversePrimer</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> KO1        KO      2017/6/30   Beijing   BGI          HiSeq2500   Arabidopsis   1       ACGCTCGACA        AACMGGATTAGATACCCKG    ACGTCATCCCCACCTTCC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> KO2        KO      2017/6/30   Beijing   BGI          HiSeq2500   Arabidopsis   1       ATCAGACACG        AACMGGATTAGATACCCKG    ACGTCATCCCCACCTTCC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-stat-统计行列"><a href="#2-stat-统计行列" class="headerlink" title="2.stat 统计行列"></a>2.stat 统计行列</h5><p><code>注意</code>csv格式正常统计，但是tsv格式统计列数量错误；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csvtk stat metadata.csv </span><br><span class="line"><span class="meta">#</span><span class="bash"> file           num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> metadata.csv         11         18</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">--注意使用tsv格式文件需要添加参数 -t</span></span><br><span class="line">csvtk stat metadata.tsv -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> file           num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> metadata.tsv          1         18</span></span><br></pre></td></tr></table></figure>

<h5 id="3-headers-打印表头"><a href="#3-headers-打印表头" class="headerlink" title="3.headers 打印表头"></a>3.headers 打印表头</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  -h, --help      help 文件调用</span><br><span class="line">  -v, --verbose   打印冗余信息，用#号分隔的文件名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认去除<span class="comment">#号注释行，如果存在#号行，-C指定一个不常用字符</span></span></span><br><span class="line">csvtk -t headers otutab.txt -C !</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KO1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KO2</span></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line">csvtk headers otutab.txt -t  -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> otutab.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1    <span class="comment">#OTUID</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2    KO1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3    KO2</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<h5 id="4-dim-nrow-ncol-文件行列统计"><a href="#4-dim-nrow-ncol-文件行列统计" class="headerlink" title="4.dim/nrow/ncol 文件行列统计"></a>4.dim/nrow/ncol 文件行列统计</h5><p>这里需要注意的式-n参数可以用于多文件统计，没有表头记得加上-H参数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">      --cols       只打印文件列数量</span><br><span class="line">  -h, --help       调用帮助文件</span><br><span class="line">  -n, --no-files   不打印文件名</span><br><span class="line">      --rows       只打印文件行数量</span><br><span class="line">      --tabular    输出机器友好的tab格式文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认输出列和行数量</span></span><br><span class="line">csvtk -t dim otutab.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">file         num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash">otutab.txt         19      2,631</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">仅仅输出行数量</span></span><br><span class="line">csvtk -t nrow otutab.txt </span><br><span class="line"><span class="meta">#</span><span class="bash">2631</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅仅输出列数量</span></span><br><span class="line">csvtk ncol otutab.txt  -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 19</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">--注意同时统计多个文件可以在后面加上-n参数</span></span><br><span class="line"></span><br><span class="line">csvtk dim *.txt -t -n</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">file           num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash">otutab.txt           19      2,631</span></span><br><span class="line"><span class="meta">#</span><span class="bash">taxonomy.txt          8      2,631</span></span><br></pre></td></tr></table></figure>

<h5 id="5-summary-统计"><a href="#5-summary-统计" class="headerlink" title="5.summary 统计"></a>5.summary 统计</h5><p>选定的数字或文本字段的汇总统计信息(按组分组字段)，注意<strong>不能混用列名和数字标识</strong>。</p>
<p>所支持的函数：</p>
<p>countn (count numeric values), min, max, sum,<br> mean, stdev, variance, median, q1, q2, q3,<br> entropy (Shannon entropy),<br> prod (product of the elements)；</p>
<p>支持的调用语法：</p>
<p>count, first, last, rand, unique, collapse, countunique。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -n, --decimal-width int   限制浮点数为N个小数点(默认为2)</span><br><span class="line">  -f, --fields strings      统计类型指定：operations on these fields. e.g -f 1:count,1:sum or -f colA:mean. available operations: collapse, count, countn, countunique, entropy, first, last, max, mean, median, min, prod, q1, q2, q3, rand, stdev, sum, uniq, variance</span><br><span class="line">  -g, --groups string       分组，按照行或者列：group via fields. e.g -f 1,2 or -f columnA,columnB</span><br><span class="line">  -h, --help                调用帮助文件</span><br><span class="line">  -i, --ignore-non-numbers   忽略NA值：&quot;NA&quot; or &quot;N/A&quot;</span><br><span class="line">  -S, --rand-seed int       设定随机种子，默认11 &quot;rand&quot; (default 11)</span><br><span class="line">  -s, --separater string    separater for collapsed data (default &quot;; &quot;)</span><br></pre></td></tr></table></figure>

<p>​    下面就一个列进行统计，主要是训练这些常用函数的用法。很多时候可以联合使用。注意经常我们的数据中有NA存在，此时加上-i。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-对指定列WT2进行求和，获得某样本的总数据量</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:sum -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 求均值</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:mean -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计该列的长度，即行数</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:countn -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-对应的max，min和first，last是一个道理，也就是下面的命令同等有效：</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:first -t</span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:max -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计方差：variance</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:variance -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计标准差</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:stdev -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取非重复值</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:uniq -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对去除重复值后的值统计数量</span></span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:countunique -t</span><br></pre></td></tr></table></figure>

<p>对多个列同时进行统计：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat otutab.txt | csvtk summary -f WT2:countunique,OE1:uniq -t</span><br><span class="line">cat otutab.txt | csvtk summary -f WT2:mean,OE1:mean -t</span><br></pre></td></tr></table></figure>

<h5 id="6-join-连接数据框"><a href="#6-join-连接数据框" class="headerlink" title="6.join 连接数据框"></a>6.join 连接数据框</h5><p>​    该功能和R包dplyr的许多功能类似，用法类似，例如这个功能：共有连接，左连接，全部连接。可以支持多个共有列。默认如果不加参数，会进行共有列连接。    </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csvtk join -h</span><br><span class="line"></span><br><span class="line"> -f, --fields string    Semicolon separated key fields of all files, if given one, we think all the files have the same key columns. Fields of different files should be separated by &quot;;&quot;, e.g -f &quot;1;2&quot; or -f &quot;A,B;C,D&quot; or -f id (default &quot;1&quot;)</span><br><span class="line">  -F, --fuzzy-fields     using fuzzy fields, e.g., -F -f &quot;*name&quot; or -F -f &quot;id123*&quot;</span><br><span class="line">  -h, --help             help for join</span><br><span class="line">  -i, --ignore-case      ignore case</span><br><span class="line">  -k, --keep-unmatched   keep unmatched data of the first file (left join)</span><br><span class="line">  -L, --left-join        left join, equals to -k/--keep-unmatched, exclusive with --outer-join</span><br><span class="line">      --na string        content for filling NA data</span><br><span class="line">  -O, --outer-join       outer join, exclusive with --left-join</span><br></pre></td></tr></table></figure>

<p>​    实例，这里我们的实例都是来自于微生物组分析得到的表格，让大家可以更好的应用于微生物组数据分析和实践。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-合并OTU表格和注释文件 -f 1 指定第一列为合并公共列</span></span><br><span class="line">csvtk -t join -f 1 otutab.txt taxonomy.txt | csvtk -t dim</span><br><span class="line"><span class="meta">#</span><span class="bash">file   num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-            26      2,631</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存结果，供后面使用</span></span><br><span class="line">csvtk -t join -f 1 otutab.txt taxonomy.txt &gt; otutax.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 演示一下左连接：仅保留第一个文件的列</span></span><br><span class="line">head otutab.txt &gt; otutab_sub.txt</span><br><span class="line">csvtk -t join -f 1 otutab_sub.txt taxonomy.txt --left-join | csvtk -t dim</span><br><span class="line"><span class="meta">#</span><span class="bash">file   num_cols   num_rows</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-            26          9</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">--如果左连接第二个表格没有对应的信息，则使用NA填充空位</span></span><br><span class="line">head -n9 taxonomy.txt &gt; taxonomy_sub.txt</span><br><span class="line">csvtk -t join -f 1 otutab_sub.txt taxonomy_sub.txt --na NA --left-join</span><br><span class="line"><span class="meta">#</span><span class="bash">--全部合并，对于空缺位置可以随意标示，0，或者NA或者自己的名字也可以</span></span><br><span class="line">csvtk -t join -f 1 otutab_sub.txt taxonomy_sub.txt --outer-join --na wentao</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过列名来指定合并列</span></span><br><span class="line">csvtk -t join -f &quot;OTUID;OTUID&quot; otutab.txt taxonomy.txt |csvtk -t dim</span><br></pre></td></tr></table></figure>

<h5 id="7-add-del-header-添加表头—rename列名重命名"><a href="#7-add-del-header-添加表头—rename列名重命名" class="headerlink" title="7.add/del-header 添加表头—rename列名重命名"></a>7.add/del-header 添加表头—rename列名重命名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 准备一下无表头的表</span></span><br><span class="line">cut -f 1-3 metadata.tsv | tail -n+2 | head -n2 &gt; metatest.txt</span><br><span class="line">cat metatest.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">KO1     KO      2017/6/30</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KO2     KO      2017/6/30</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加表头</span></span><br><span class="line">csvtk -t add-header -n SampleID,Group,Date metatest.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">SampleID        Group   Date</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KO1     KO      2017/6/30</span></span><br><span class="line"><span class="meta">#</span><span class="bash">KO2     KO      2017/6/30</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加列名</span></span><br><span class="line">seq 3 | csvtk add-header</span><br><span class="line"><span class="meta">#</span><span class="bash">添加后删除列名</span></span><br><span class="line">seq 3 | csvtk add-header | csvtk del-header</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用-H参数指定无表头防止误删</span></span><br><span class="line">seq 3 | csvtk del-header -H</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">列名重命名</span></span><br><span class="line">csvtk -t cut -f 1-2 taxonomy.txt |head |csvtk -t rename -f 1-2 -n B,P </span><br><span class="line"><span class="meta">#</span><span class="bash">B,P</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657,Bacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2,Bacteria</span></span><br></pre></td></tr></table></figure>

<h5 id="8-文件合并"><a href="#8-文件合并" class="headerlink" title="8.文件合并"></a>8.文件合并</h5><h6 id="8-1-按列合并"><a href="#8-1-按列合并" class="headerlink" title="8.1 按列合并"></a>8.1 按列合并</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过第一列合并</span></span><br><span class="line">csvtk -t join -f 1 otutab.txt taxonomy.txt otus_fa.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过共有列名合并</span></span><br><span class="line">csvtk -t join -f OTUID otutab.txt taxonomy.txt otus_fa.txt |head</span><br></pre></td></tr></table></figure>

<h6 id="8-2-按行合并-concat"><a href="#8-2-按行合并-concat" class="headerlink" title="8.2 按行合并-concat"></a>8.2 按行合并-concat</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -h, --help                    help for concat</span><br><span class="line">  -i, --ignore-case             忽略列名 (column name)</span><br><span class="line">  -k, --keep-unmatched          keep blanks even if no any data of a file matches</span><br><span class="line">  -u, --unmatched-repl string   replacement for unmatched data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要列名一样， 但是顺序可以不一样，并去除多余表头</span></span><br><span class="line">wc -l otutab_sub.txt otutab.txt </span><br><span class="line">csvtk -t concat otutab_sub.txt otutab.txt | wc -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不同时默认共有列合并，-i忽略大小写</span></span><br><span class="line">csvtk -t concat otutab_sub.txt otutab.txt -i | csvtk -t stat</span><br><span class="line"><span class="meta">#</span><span class="bash"> -u 将未匹配上的行使用Unmached补全</span></span><br><span class="line">csvtk concat otutab_sub.txt otutab.txt -u Unmached | csvtk -t stat</span><br></pre></td></tr></table></figure>



<h5 id="9-join-summary分组统计"><a href="#9-join-summary分组统计" class="headerlink" title="9.join+summary分组统计"></a>9.join+summary分组统计</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -g 参数指定分组</span></span><br><span class="line">cat otutax.txt | csvtk -t summary -i -f  OE2:mean,WT2:mean -g Phylum</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定多个分组</span></span><br><span class="line">cat otutax.txt | csvtk -t summary -i -f  OE2:mean,WT2:mean -g Phylum,Class</span><br></pre></td></tr></table></figure>

<h5 id="10-transpose-转置数据框"><a href="#10-transpose-转置数据框" class="headerlink" title="10.transpose 转置数据框"></a>10.transpose 转置数据框</h5><p>​    转置这一个步骤相当消耗时间，尤其是宏基因组的较大的表格。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--转置，提取表头，打印前面几个</span></span><br><span class="line">csvtk -t transpose otutab.txt |csvtk -t headers |head</span><br></pre></td></tr></table></figure>

<h5 id="11-cut-列名筛选"><a href="#11-cut-列名筛选" class="headerlink" title="11.cut 列名筛选"></a>11.cut 列名筛选</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -f 参数可以使用数字指定列 并挑选出来</span></span><br><span class="line">csvtk -t cut -f 1,3 otutab.txt | csvtk -t headers</span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 也可以通过列名来指定并打印列</span></span><br><span class="line">csvtk -t cut -f OE2 otutab.txt | csvtk -t headers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 去掉列只需要在序号前面加上-即可，这里去除第二和第三列</span></span><br><span class="line">csvtk -t cut -f -2,-3 otutab.txt | csvtk -t headers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定范围去除某些列，这里去除第二列到第六列</span></span><br><span class="line">csvtk -t cut -f -6--2 otutab.txt | csvtk -t headers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意负号添加在列名字前面同样有效</span></span><br><span class="line">csvtk -t cut -f -OE1 otutab.txt | csvtk -t headers</span><br></pre></td></tr></table></figure>

<p>使用-F参数，使用双引号，可以使用正则而表达式。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 筛选W和OE开头的列</span></span><br><span class="line">csvtk -t cut -F -f &quot;OTUID,W*,OE*&quot; otutab.txt | csvtk -t headers</span><br><span class="line"><span class="meta">#</span><span class="bash">--无论是按照数字还是列名指定列，这个顺序就是打印出来的顺序。</span></span><br><span class="line">csvtk -t cut -F -f &quot;OTUID,OE1,WT1&quot; otutab.txt | csvtk -t headers</span><br></pre></td></tr></table></figure>

<h5 id="12-csv2md-表格转化为markdown格式"><a href="#12-csv2md-表格转化为markdown格式" class="headerlink" title="12.csv2md 表格转化为markdown格式"></a>12.csv2md 表格转化为markdown格式</h5><p>​    在用markdown写笔记，或做网页时，经常需要把表格排版为markdown格式，手动排版非常耗时。使用此工具会极方便</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -f 1-7 metadata.tsv | csvtk -t csv2md</span><br><span class="line">SampleID|Group|Date     |Site     |CRA       |CRR      |BarcodeSequence</span><br><span class="line">:-------|:----|:--------|:--------|:---------|:--------|:--------------</span><br><span class="line">KO1     |KO   |2017/6/30|Chaoyang |CRA002352 |CRR117575|ACGCTCGACA</span><br><span class="line">KO2     |KO   |2017/6/30|Chaoyang |CRA002352 |CRR117576|ATCAGACACG</span><br><span class="line">KO3     |KO   |2017/7/2 |Changping|CRA002352 |CRR117577|ATATCGCGAG</span><br></pre></td></tr></table></figure>

<h5 id="13-csv2xlsx-转化为xlsx格式"><a href="#13-csv2xlsx-转化为xlsx格式" class="headerlink" title="13.csv2xlsx 转化为xlsx格式"></a>13.csv2xlsx 转化为xlsx格式</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 无需指定输出，会生成 otutab.txt.xlsx 的Excel表格输出</span></span><br><span class="line">csvtk -t csv2xlsx otutab.txt  </span><br><span class="line"><span class="meta">#</span><span class="bash"> -o 指定输出文件名</span></span><br><span class="line">csvtk -t csv2xlsx otutab.txt -o otutab.xlsx</span><br></pre></td></tr></table></figure>

<h5 id="14-xlsx2csv-Excel转换为文本表格"><a href="#14-xlsx2csv-Excel转换为文本表格" class="headerlink" title="14.xlsx2csv Excel转换为文本表格"></a>14.xlsx2csv Excel转换为文本表格</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -h, --help                help for xlsx2csv</span><br><span class="line">  -a, --list-sheets        转化全部的sheet</span><br><span class="line">  -i, --sheet-index int     指定sheet (default 1)</span><br><span class="line">  -n, --sheet-name string   sheet to retrieve</span><br><span class="line"><span class="meta">#</span><span class="bash"> -将xlsx转化为csv文件，显示表格中sheet编号</span> </span><br><span class="line">csvtk xlsx2csv -a otutab.txt.xlsx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转化第一张sheet，输出到屏幕</span></span><br><span class="line">csvtk -t xlsx2csv -i 1 otutab.txt.xlsx | head</span><br></pre></td></tr></table></figure>

<h5 id="15-cut-选择列"><a href="#15-cut-选择列" class="headerlink" title="15.cut 选择列"></a>15.cut 选择列</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">例子:</span><br><span class="line"></span><br><span class="line">  1. 选择单个列，根际列序号或者列名</span><br><span class="line">     csvtk cut -f 1</span><br><span class="line">     csvtk cut -f colA</span><br><span class="line">  2. 多个列选择 (可以重复列名，调整顺序)</span><br><span class="line">     csvtk cut -f 1,3,2,1</span><br><span class="line">     csvtk cut -f colA,colB,colA</span><br><span class="line">  3. 选择列可用于列排序</span><br><span class="line">     csvtk cut -f 1,3-5       # 1, 3, 4, 5</span><br><span class="line">     csvtk cut -f 3,5-        # 3rd col, and 5th col to the end 第五列发放最后面</span><br><span class="line">     csvtk cut -f 1-          # 全选列</span><br><span class="line">     csvtk cut -f 2-,1        # move 1th col to the end</span><br><span class="line">  4. 负号放到前面代表去除某一列</span><br><span class="line">     csvtk cut -f -1,-3       # discard 1st and 3rd column</span><br><span class="line">     csvtk cut -f -1--3       # discard 1st to 3rd column</span><br><span class="line">     csvtk cut -f -2-         # discard 2nd and all columns on the right.</span><br><span class="line">     csvtu cut -f -colA,-colB # discard colA and colB</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -f, --fields string   选择列. type &quot;csvtk cut -h&quot; for examples</span><br><span class="line">  -F, --fuzzy-fields    模糊选择，正则表达书，用单引号括起来, e.g., -F -f &quot;*name&quot; or -F -f &quot;id123*&quot;</span><br><span class="line">  -h, --help            help for cut</span><br><span class="line">  -i, --ignore-case     ignore case (column name)</span><br><span class="line">  -u, --uniq-column     deduplicate columns matched by multiple fuzzy column names</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列名选择</span></span><br><span class="line">csvtk -t cut -f OE2 otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OE2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1610</span></span><br><span class="line"><span class="meta">#</span><span class="bash">497</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 序号选择</span></span><br><span class="line">csvtk -t cut -f 2,3,5 otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">KO1     KO2     KO4</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1073    1926    1356</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1965    1233    2241</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 模糊选择</span></span><br><span class="line">csvtk -t cut -F -f &#x27;OE*&#x27; otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OE1     OE2     OE3     OE4     OE5     OE6</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1259    1610    1337    944     1245    1013</span></span><br><span class="line"><span class="meta">#</span><span class="bash">641     497     1225    1271    948     638</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除某些列</span></span><br><span class="line">csvtk -t cut -f -1,-2,-3 otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">KO3     KO4     KO5     KO6     OE1     OE2</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash">810     1356    1064    1069    1259    1610</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">2368    2241    2901    1835    641     497</span>  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择第八列以及之后的全部列</span></span><br><span class="line">csvtk -t cut -f 8- otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OE1     OE2     OE3     OE4     OE5     OE6     WT1     WT2     WT3     WT4     WT5     WT6</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1259    1610    1337    944     1245    1013    2303    2512    1698    1974    1441    1544</span></span><br><span class="line"><span class="meta">#</span><span class="bash">641     497     1225    1271    948     638     1286    1499    843     1122    1496    1177</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择第八列到第十列</span></span><br><span class="line">csvtk -t cut -f 8-10 otutab.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OE1     OE2     OE3</span></span><br><span class="line"><span class="meta">#</span><span class="bash">259    1610    1337</span></span><br></pre></td></tr></table></figure>

<h5 id="16-uniq-去除重复"><a href="#16-uniq-去除重复" class="headerlink" title="16.uniq 去除重复"></a>16.uniq 去除重复</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 挑选界，对界进行去除重复</span></span><br><span class="line">csvtk -t cut -f 2 taxonomy.txt |csvtk uniq -f 1</span><br><span class="line"><span class="meta">#</span><span class="bash">Kingdom</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Archaea</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接对注释文件某列去除重复，不考虑其他列</span></span><br><span class="line">csvtk -t uniq -t -f 2 taxonomy.txt </span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID,Kingdom,Phylum,Class,Order,Family,Genus,Species</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657,Bacteria,Actinobacteria,Actinobacteria,Actinomycetales,Thermomonosporaceae,Unassigned,Unassigned</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_1646,Archaea,Thaumarchaeota,Unassigned,Nitrososphaerales,Nitrososphaeraceae,Nitrososphaera,Unassigned</span></span><br></pre></td></tr></table></figure>

<h5 id="17-freq-统计频数"><a href="#17-freq-统计频数" class="headerlink" title="17.freq 统计频数"></a>17.freq 统计频数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -f, --fields string   select only these fields. e.g -f 1,2 or -f columnA,columnB (default &quot;1&quot;)</span><br><span class="line">  -F, --fuzzy-fields    模糊选择, e.g., -F -f &quot;*name&quot; or -F -f &quot;id123*&quot;</span><br><span class="line">  -i, --ignore-case     ignore case</span><br><span class="line">  -r, --reverse         反转排序</span><br><span class="line">  -n, --sort-by-freq    按照频数排序</span><br><span class="line">  -k, --sort-by-key     按照键排序</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对第二列统计频数</span></span><br><span class="line">csvtk -t freq -f 2 taxonomy.txt </span><br><span class="line"><span class="meta">#</span><span class="bash">Kingdom,frequency</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Archaea,1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria,2630</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按数值反转排序</span></span><br><span class="line">csvtk -t freq -f 2 taxonomy.txt -n -r</span><br><span class="line"><span class="meta">#</span><span class="bash">Kingdom,frequency</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria,2630</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Archaea,1</span></span><br></pre></td></tr></table></figure>

<h5 id="18-inter-选择多个文件共有列内容"><a href="#18-inter-选择多个文件共有列内容" class="headerlink" title="18.inter 选择多个文件共有列内容"></a>18.inter 选择多个文件共有列内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csvtk -t inter otutab.txt taxonomy.txt |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2700</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2092</span></span><br></pre></td></tr></table></figure>

<h5 id="19-grep-指定列匹配-支持正则"><a href="#19-grep-指定列匹配-支持正则" class="headerlink" title="19.grep 指定列匹配(支持正则)"></a>19.grep 指定列匹配(支持正则)</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line"></span><br><span class="line">  -f, --fields string         comma separated key fields, column name or index. e.g. -f 1-3 or -f id,id2 or -F -f &quot;group*&quot; (default &quot;1&quot;)</span><br><span class="line">  -F, --fuzzy-fields          模糊选择, e.g., -F -f &quot;*name&quot; or -F -f &quot;id123*&quot;</span><br><span class="line">  -h, --help                  help for grep</span><br><span class="line">  -i, --ignore-case           ignore case</span><br><span class="line">  -v, --invert                去除匹配上的行</span><br><span class="line">  -n, --line-number           打印行号 (&quot;n&quot;)</span><br><span class="line">  -N, --no-highlight          不高亮</span><br><span class="line">  -p, --pattern strings       优雅答应选项(multiple values supported)</span><br><span class="line">  -P, --pattern-file string   pattern files (one pattern per line)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择第3列门是Actinobacteria 的行</span></span><br><span class="line">csvtk -t grep -f 3 -p Actinobacteria taxonomy.txt </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可用列表 -P 接匹配列表</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建一个id列表，并去除表头</span></span><br><span class="line">csvtk -t cut -f 1 otutab.txt | head | csvtk del-header &gt; id.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用-P选项后面接列表，比awk筛选更方便</span></span><br><span class="line">csvtk -t grep -f 1 -P id.txt taxonomy.txt</span><br></pre></td></tr></table></figure>

<h5 id="20-filter-列条件过滤"><a href="#20-filter-列条件过滤" class="headerlink" title="20.filter 列条件过滤"></a>20.filter 列条件过滤</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择OE2 列序列数量大于500的行</span></span><br><span class="line">csvtk -t filter -f &quot;OE2&gt;500&quot; otutab.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">支持多列共同筛选</span></span><br><span class="line">csvtk -t filter -f &quot;2-5&gt;300&quot; otutab.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意模糊匹配使用-F选项，所有列均满足条件</span></span><br><span class="line">csvtk -t filter -F -f &quot;OE*&gt;500&quot; otutab.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID,KO1,KO2,KO3,KO4,KO5,KO6,OE1,OE2,OE3,OE4,OE5,OE6,WT1,WT2,WT3,WT4,WT5,WT6</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657,1073,1926,810,1356,1064,1069,1259,1610,1337,944,1245,1013,2303,2512,1698,1974,1441,1544</span></span><br></pre></td></tr></table></figure>

<h5 id="21-split-数据列拆分为多文件"><a href="#21-split-数据列拆分为多文件" class="headerlink" title="21.split 数据列拆分为多文件"></a>21.split 数据列拆分为多文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按照门进行拆分文件-会以门的名字命名</span></span><br><span class="line">csvtk -t split taxonomy.txt -f Phylum </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分出来的文件</span></span><br><span class="line">ls taxonomy-*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除这些文件，太多使目录变混乱</span></span><br><span class="line">rm taxonomy-*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过指定-o输出到一个文件夹中</span></span><br><span class="line">mkdir -p split</span><br><span class="line">csvtk -t split taxonomy.txt -f Phylum -o split/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定两个列进行分析</span></span><br><span class="line">csvtk -t split taxonomy.txt -f Phylum,Class  -o split/</span><br></pre></td></tr></table></figure>

<h5 id="22-comb-对每一行的元素进行组合"><a href="#22-comb-对每一行的元素进行组合" class="headerlink" title="22.comb 对每一行的元素进行组合"></a>22.comb 对每一行的元素进行组合</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两两组合</span></span><br><span class="line">csvtk -t cut -f 1,2,3 taxonomy.txt |head -n 2 |csvtk -t comb -n 2</span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657,Bacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657,Actinobacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria,Actinobacteria</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三个组合</span></span><br><span class="line">csvtk -t cut -f 1,2,3,4 taxonomy.txt |head -n 2 |csvtk -t comb -n 3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 断棍模型-单个到全部组合都做出来</span></span><br><span class="line">csvtk -t cut -f 1,2,3,4 taxonomy.txt |head -n 2 |csvtk -t comb -n 0</span><br></pre></td></tr></table></figure>

<h5 id="23-mutate-mutate2-根据规则创建新列"><a href="#23-mutate-mutate2-根据规则创建新列" class="headerlink" title="23.mutate/mutate2 根据规则创建新列"></a>23.mutate/mutate2 根据规则创建新列</h5><p>mutate:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用已有列改名 作为新的一列</span></span><br><span class="line">csvtk -t mutate -f Class -n Class2 taxonomy.txt | head -n3</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   Kingdom Phylum  Class   Order   Family  Genus   Species Class2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 Bacteria        Actinobacteria  Actinobacteria  Actinomycetales Unassigned      Unassigned      Unassigned      Actinobacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   Bacteria        Proteobacteria  Betaproteobacteria      Burkholderiales Comamonadaceae  Pelomonas       Pelomonas_puraquae     Betaproteobacteria</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复杂一点：将otu表格otu名字种otu部分 提取出来做为group列</span></span><br><span class="line">csvtk -t mutate -f 1 -n group -p &quot;^(.+?)[0-9]&quot; otutab.txt |head -n3</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   KO1     KO2     KO3     KO4     KO5     KO6     OE1     OE2     OE3     OE4     OE5     OE6     WT1     WT2     WT3     WT4    WT5      WT6     group</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 1073    1926    810     1356    1064    1069    1259    1610    1337    944     1245    1013    2303    2512    1698    1974   1441     1544    ASV_</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   1965    1233    2368    2241    2901    1835    641     497     1225    1271    948     638     1286    1499    843     1122   1496     1177    ASV_</span></span><br></pre></td></tr></table></figure>

<p>mutate2:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用字符串重复，作为一个新列</span></span><br><span class="line">cut -f 1-3 otutab.txt |csvtk -t mutate2 -t -e &quot; &#x27;abc&#x27; &quot; -n group |head -n3</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   KO1     KO2     group</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 1073    1926    abc</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   1965    1233    abc</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列 合并，如果是字符串，可以合并在一起</span></span><br><span class="line">cut -f 1-4 taxonomy.txt |csvtk -t mutate2 -n Comname -e &#x27; $Class + &quot;-&quot; + $Phylum &#x27; |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   Kingdom Phylum  Class   Comname</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 Bacteria        Actinobacteria  Actinobacteria  Actinobacteria-Actinobacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   Bacteria        Proteobacteria  Betaproteobacteria      Betaproteobacteria-Proteobacteria</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_3   Bacteria        Proteobacteria  Gammaproteobacteria     Gammaproteobacteria-Proteobacteria</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果是数值可以进行基本算数运算-例如两列求和</span></span><br><span class="line">cut -f1-7 otutab.txt |csvtk -t mutate2 -n sum12 -e &#x27; $3 + $2 &#x27; |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   KO1     KO2     KO3     KO4     KO5     KO6     sum12</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 1073    1926    810     1356    1064    1069    2999.00</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   1965    1233    2368    2241    2901    1835    3198.00</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用逻辑判断，添加新列</span></span><br><span class="line">cut -f1-7 otutab.txt | csvtk -t mutate2 -n sum12 -e &#x27; $2&gt;1000&#x27; |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   KO1     KO2     KO3     KO4     KO5     KO6     sum12</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 1073    1926    810     1356    1064    1069    <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   1965    1233    2368    2241    2901    1835    <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_3   567     460     898     902     1224    854     <span class="literal">false</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以使用条件分配逻辑判断的填充</span></span><br><span class="line">cut -f1-7 otutab.txt |csvtk -t mutate2 -n sum12 -e &#x27; $3&gt;1000? &quot;small&quot; : &quot;big&quot;&#x27; |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   KO1     KO2     KO3     KO4     KO5     KO6     sum12</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 1073    1926    810     1356    1064    1069    small</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_2   1965    1233    2368    2241    2901    1835    small</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_3   567     460     898     902     1224    854     big</span></span><br></pre></td></tr></table></figure>

<h5 id="24-collapse-分类汇总-合并同类项"><a href="#24-collapse-分类汇总-合并同类项" class="headerlink" title="24.collapse 分类汇总/合并同类项"></a>24.collapse 分类汇总/合并同类项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 想知道每个门中有哪些ASV</span></span><br><span class="line">cat taxonomy.txt |csvtk -t collapse -f 1,2,3  -v 1  -s &#x27;;&#x27; | less -S &gt; phylum_ASV.txt</span><br></pre></td></tr></table></figure>

<h5 id="25-sep-指定分隔符分隔一列内容"><a href="#25-sep-指定分隔符分隔一列内容" class="headerlink" title="25.sep 指定分隔符分隔一列内容"></a>25.sep 指定分隔符分隔一列内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -n 指定分隔出来的内容名称，这里指定两个，那就只会分出来两个，多指定几个，那就多分出来几个。</span></span><br><span class="line">csvtk -t sep phylum_ASV.txt -f3 -s &quot;;&quot; -n OTU1,OTU2 --drop | less -S </span><br><span class="line"><span class="meta">#</span><span class="bash">Kingdom Phylum  OTUID   OTU1    OTU2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria        Ignavibacteriae ASV_1159;ASV_2278       ASV_1159        ASV_2278</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Archaea Thaumarchaeota  ASV_1646        ASV_1646</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria        Armatimonadetes ASV_989;ASV_1709;ASV_1839;ASV_2014      ASV_989 ASV_1709</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Bacteria        Gemmatimonadetes        ASV_2825        ASV_2825</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --merge 会将剩下的内容放到最后一列</span></span><br><span class="line">csvtk -t sep phylum_ASV.txt -f3 -s &quot;;&quot; -n OTU1,OTU2 --merge| less -S</span><br></pre></td></tr></table></figure>

<h5 id="26-gather-表格宽变长-用于绘图"><a href="#26-gather-表格宽变长-用于绘图" class="headerlink" title="26.gather 表格宽变长(用于绘图)"></a>26.gather 表格宽变长(用于绘图)</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按照第一列作为索引，将数据变为长数据，方便出图</span></span><br><span class="line">cat otutab.txt |csvtk -t gather -k SampleID -v value -f -1 |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   SampleID        value</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 KO1     1073</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 KO2     1926</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 KO3     810</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面使用id和界作为索引，变化为长数据</span></span><br><span class="line">cat otutax.txt |csvtk -t gather -k id -v value -f -1,-21 |head</span><br><span class="line"><span class="meta">#</span><span class="bash">OTUID   Phylum  id      value</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 Actinobacteria  KO1     1073</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ASV_657 Actinobacteria  KO2     1926</span></span><br></pre></td></tr></table></figure>

<h5 id="27-fold-归类"><a href="#27-fold-归类" class="headerlink" title="27.fold 归类"></a>27.fold 归类</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择门和科这两个等级数据，并去除重复，然后按照门，将科归类到 门后面，默认使用 “;” 分隔</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 某个门中有哪 些科，和collapse有点类似，按; 分隔</span></span><br><span class="line">cat taxonomy.txt | csvtk -t uniq -f Phylum,Class |csvtk -t fold -f Phylum -v Class</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 换用逗号和空格作为分隔符</span></span><br><span class="line">cat taxonomy.txt | csvtk -t uniq -f Phylum,Class |csvtk -t fold -f Phylum -v Class -s &quot;,  &quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面按照门和钢给OTU做分类</span></span><br><span class="line">cat taxonomy.txt |csvtk -t collapse -f 1,2,3  -v 1  -s &#x27;;&#x27; | head</span><br></pre></td></tr></table></figure>

<h5 id="28-其他功能"><a href="#28-其他功能" class="headerlink" title="28.其他功能"></a>28.其他功能</h5><h6 id="1-csvtk-corr-计算两列之间的皮尔逊相关"><a href="#1-csvtk-corr-计算两列之间的皮尔逊相关" class="headerlink" title="1.csvtk corr 计算两列之间的皮尔逊相关"></a>1.csvtk corr 计算两列之间的皮尔逊相关</h6><p>​    这里使用的txt文件，所以添加了-t全局参数，这里作者帮助文件显示只能计算这一种相关，如果我们做微生物组分析，斯皮尔曼相关更加适合</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csvtk -t corr -i -f WT1,WT2 otutab.txt </span><br><span class="line"><span class="meta">#</span><span class="bash"> WT1    WT2    0.9373</span></span><br></pre></td></tr></table></figure>

<h6 id="2-csv2json-转化csv格式为json格式"><a href="#2-csv2json-转化csv格式为json格式" class="headerlink" title="2.csv2json 转化csv格式为json格式"></a>2.csv2json 转化csv格式为json格式</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -n3 otutab.txt | csvtk -t csv2json</span><br></pre></td></tr></table></figure>

<h6 id="3-splitxlsx-拆分xlsx中的sheet表格"><a href="#3-splitxlsx-拆分xlsx中的sheet表格" class="headerlink" title="3.splitxlsx 拆分xlsx中的sheet表格"></a>3.splitxlsx 拆分xlsx中的sheet表格</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">csvtk xlsx2csv -a otutab.txt.xlsx</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>生信</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>biosoft</tag>
        <tag>CommonSoft</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot2函数</title>
    <url>/ggplot2/ggplot2%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>ggplot2的基本概念：</strong></p>
<ul>
<li><p>ggplot2的核心理念是将绘图与数据分离，数据相关的绘图与数据无关的绘图分离</p>
</li>
<li><p>ggplot2是按<strong>图层</strong>作图</p>
</li>
<li><p>ggplot2保有命令式作图的调整函数，使其更具灵活性</p>
</li>
<li><p>ggplot2将常见的统计变换融入到了绘图中。</p>
<span id="more"></span></li>
</ul>
<p>ggplot的绘图有以下几个<strong>特点</strong>：</p>
<ul>
<li><p>第一，有明确的起始（以ggplot函数开始）与终止（一句语句一幅图）；</p>
</li>
<li><p>其二，图层之间的叠加是靠“+”号实现的，越后面其图层越高。</p>
</li>
</ul>
<p>ggplot<strong>图的元素</strong>可以主要可以概括如下：</p>
<ul>
<li><p>plot（指整张图，包括background和title）</p>
</li>
<li><p>axis（包括stick，text，title和stick）</p>
</li>
<li><p>legend（包括backgroud、text、title）</p>
</li>
<li><p>facet ( 分为外部strip部分（包括backgroud和text）和内部panel部分（包括backgroud、boder和网格线grid，其中粗的叫grid.major，细的叫grid.minor ) )</p>
</li>
</ul>
<p>ggplot2里的所有<strong>函数</strong>可以分为以下几类：</p>
<ul>
<li><p>运算（如fortify_，mean_等）</p>
</li>
<li><p>初始化、展示绘图等命令（ggplot，plot，print等）</p>
</li>
<li><p>按变量组图（facet_等）_</p>
</li>
<li><p>真正的绘图命令（stat_，geom_，annotate）</p>
</li>
</ul>
<blockquote>
<p>以上三类就是实现一个函数一个图层的<strong>核心函数</strong>。</p>
</blockquote>
<ul>
<li><p>微调图型：严格意义上说，这一类函数不是再实现图层，而是在做局部调整。</p>
</li>
<li><p>aes : 同样适用于修改geom_XXX() aes参数控制了对哪些变量进行图形映射，以及映射方式，图形属性（aes） 横纵坐标、点的大小、颜色，填充色等</p>
</li>
</ul>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p><strong>ggplot(data = , aes(x = , y = )) +</strong></p>
<p><strong>geom_XXX(…) + … + stat_XXX(…) + … +</strong></p>
<p><strong>annotate(…) + … + labs(…) +</strong></p>
<p><strong>scale_XXX(…) + coord_XXX(…) + guides(…) + theme(…) +</strong></p>
<p><strong>facet_XXX(…)</strong></p>
<h3 id="公式意义"><a href="#公式意义" class="headerlink" title="公式意义"></a>公式意义</h3><ul>
<li><p><strong>geom</strong> :表示几何对象，它是ggplot中重要的图层控制对象，因为它负责图形渲染的类型。<br>几何对象（geom_） 上面指定的图形属性需要呈现在一定的几何对象上才能被我们看到，这些承载图形属性的对象可能是点，可能是线，可能是bar</p>
</li>
<li><p><strong>stat</strong> :统计变换 比如求均值，求方差等，当我们需要展示出某个变量的某种统计特征的时候，需要用到统计变换</p>
</li>
<li><p><strong>annotate</strong>：添加注释 #由于设置的文本会覆盖原来的图中对应的位置，可以改变文本的透明度或者颜色 例：  annotate(geom=’text’)会向图形添加一个单独的文本对象  annotate(“text”,x=23,y=200,parse=T,label = “x[1]==x[2]”)</p>
</li>
<li><p><strong>labs</strong> : labs(x = “这是 X 轴”, y = “这是 Y 轴”, title = “这是标题”) ## 修改文字</p>
</li>
<li><p><strong>scale_</strong>:  标度是一种函数，它控制了数学空间到图形元素空间的映射。一组连续数据可以映射到X轴坐标，也可以映射到一组连续的渐变色彩。一组分类数据可以映射成为不同的形状，也可以映射成为不同的大小，这就是与aes内的各种美学（shape、color、fill、alpha）调整有关的函数。</p>
</li>
<li><p>**coord_**：调整坐标，控制了图形的坐标轴并影响所有图形元素. 调整坐标  coord_flip()来翻转坐标轴。使用xlim()和ylim()来设置连续型坐标轴的最小值和最大值  coord_cartesian(xlim=c(0,100),ylim=c(0,100))</p>
</li>
<li><p><strong>guides</strong>：调整所有的text。</p>
</li>
<li><p><strong>theme</strong>：调整不与数据有关的图的元素的函数。theme函数采用了四个简单地函数来调整所有的主题特征：</p>
<ul>
<li>element_text调整字体</li>
<li>element_line调整主题内的所有线</li>
<li>element_rect调整所有的块</li>
<li>element_blank清空</li>
<li>theme(panel.grid =element_blank()) ## 删去网格线</li>
</ul>
</li>
<li><p>facet :控制分组绘图的方法和排列形式</p>
</li>
</ul>
<p># 不指定数据集时，data = NULL</p>
<p>一个图形对象就是一个包含<strong>数据，映射，图层，标度，坐标和分面</strong>的_列表_，外加<strong>组件options</strong></p>
<blockquote>
<p>ggplot(数据, 映射) +  geom_xxx(映射, 数据)  + stat_xxx(映射, 数据)</p>
</blockquote>
<p># 通过“+”实现不同图层的相应累加，且越往后的图层表现在上方</p>
<ul>
<li>点（point, text）：往往只有x、y指定位置，有shape但没有fill</li>
<li>线(line,vline,abline,hline,stat_function等)：一般是基于函数来处理位置</li>
<li>射(segment)：特征是指定位置有xend和yend，表示射线方向</li>
<li>面(tile, rect)：这类一般有xmax,xmin,ymax,ymin指定位置</li>
<li>棒(boxplot,bin,bar,histogram)：往往是二维或一维变量，具有width属性</li>
<li>带(ribbon,smooth):透明是特征是透明的fill</li>
<li>补：包括rug图，误差棒(errorbar,errorbarh)</li>
</ul>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul>
<li><p>数据（<strong>data</strong>）：将要展示的数据；</p>
</li>
<li><p>映射（<strong>mapping</strong>）：数据中的变量到图形成分的映射；</p>
</li>
<li><p>几何对象（<strong>geom</strong>）：用来展示数据的几何对象，如geom_point,geom_bar,geom_abline；</p>
</li>
<li><p>图形属性（<strong>aes</strong>）：图形属性决定了图形的外观，如字体大小、标签位置及刻度线；</p>
</li>
<li><p>标度（<strong>scale</strong>）：决定了变量如何被映射到图形属性上；</p>
</li>
<li><p>坐标（<strong>coordinate</strong>）：数据如何被映射到图中。如coord_cartesian:笛卡尔坐标、coord_polar:极坐标、coord_map:地理投影；</p>
</li>
<li><p>统计变换（<strong>stat</strong>）：对数据进行汇总，如箱线图：stat_boxplot、线图：stat_abline、直方图：stat_bin</p>
</li>
<li><p>分面（<strong>facet</strong>）：用来描述数据如何被拆分为子集，以及对不同子集是如何绘制的。</p>
</li>
<li><p>位置调整（<strong>position</strong>）：对图形位置做精细控制。</p>
</li>
</ul>
<p>创建ggplot对象：使用ggplot函数：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(data,mapping=aes(),...,environment=<span class="built_in">globalenv</span>())</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
<td>要绘图的数据框</td>
<td></td>
</tr>
<tr>
<td>mapping</td>
<td>一系列图形属性的映射</td>
<td>aes()</td>
</tr>
<tr>
<td>environment</td>
<td>图形属性参数所在的环境</td>
<td>globalenv()</td>
</tr>
</tbody></table>
<h3 id="几何对象"><a href="#几何对象" class="headerlink" title="几何对象"></a>几何对象</h3><p>​    为了指定图形类型，必须加入图层，可采用layer()函数。可以使用“point”等短名称来指定几何对象。layer函数允许将几何对象作为名称和值的配对，这样就不需要指出函数全名，而只需要geom_后面的部分。几何对象如下：</p>
<table>
<thead>
<tr>
<th>几何对象函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>geom_abline</td>
<td>线图，由斜率和截距指定</td>
</tr>
<tr>
<td>geom_area</td>
<td>面积图（即连续的条形图）</td>
</tr>
<tr>
<td>geom_bar</td>
<td>条形图</td>
</tr>
<tr>
<td>geom_bin2d</td>
<td>二维封箱的热图</td>
</tr>
<tr>
<td>geom_blank</td>
<td>空的几何对象，什么也不画</td>
</tr>
<tr>
<td>geom_boxplot</td>
<td>箱线图</td>
</tr>
<tr>
<td>geom_contour</td>
<td>等高线图</td>
</tr>
<tr>
<td>geom_crossbar</td>
<td>crossbar图（类似于箱线图，但没有触须和极值点）</td>
</tr>
<tr>
<td>geom_density</td>
<td>密度图</td>
</tr>
<tr>
<td>geom_density2d</td>
<td>二维密度图</td>
</tr>
<tr>
<td>geom_errorbar</td>
<td>误差线（通常添加到其他图形上，比如柱状图、点图、线图等）</td>
</tr>
<tr>
<td>geom_errorbarh</td>
<td>水平误差线</td>
</tr>
<tr>
<td>geom_freqpoly</td>
<td>频率多边形（类似于直方图）</td>
</tr>
<tr>
<td>geom_hex</td>
<td>六边形图（通常用于六边形封箱）</td>
</tr>
<tr>
<td>geom_histogram</td>
<td>直方图</td>
</tr>
<tr>
<td>geom_hline</td>
<td>水平线</td>
</tr>
<tr>
<td>geom_jitter</td>
<td>点、自动添加了扰动</td>
</tr>
<tr>
<td>geom_line</td>
<td>线</td>
</tr>
<tr>
<td>geom_linerange</td>
<td>区间，用竖直线来表示</td>
</tr>
<tr>
<td>geom_path</td>
<td>几何路径，由一组点按顺序连接</td>
</tr>
<tr>
<td>geom_point</td>
<td>点</td>
</tr>
<tr>
<td>geom_pointrange</td>
<td>一条垂直线，线的中间有一个点（与Crossbar图和箱线图相关，可以用来表示线的范围）</td>
</tr>
<tr>
<td>geom_polygon</td>
<td>多边形</td>
</tr>
<tr>
<td>geom_quantile</td>
<td>一组分位数线（来自分位数回归）</td>
</tr>
<tr>
<td>geom_rect</td>
<td>二维的长方形</td>
</tr>
<tr>
<td>geom_ribbon</td>
<td>彩虹图（在连续的x值上表示y的范围，例如Tufte著名的拿破仑远征图）</td>
</tr>
<tr>
<td>geom_rug</td>
<td>触须</td>
</tr>
<tr>
<td>geom_segment</td>
<td>线段</td>
</tr>
<tr>
<td>geom_smooth</td>
<td>平滑的条件均值</td>
</tr>
<tr>
<td>geom_step</td>
<td>阶梯图</td>
</tr>
<tr>
<td>geom_text</td>
<td>文本</td>
</tr>
<tr>
<td>geom_tile</td>
<td>瓦片（即一个个的小长方形或多边形）</td>
</tr>
<tr>
<td>geom_vline</td>
<td>竖直线</td>
</tr>
</tbody></table>
<h3 id="统计变换"><a href="#统计变换" class="headerlink" title="统计变换"></a>统计变换</h3><table>
<thead>
<tr>
<th>统计变换函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stat_abline</td>
<td>添加线条，用斜率和截距表示</td>
</tr>
<tr>
<td>stat_bin</td>
<td>分割数据，然后绘制直方图</td>
</tr>
<tr>
<td>stat_bin2d</td>
<td>二维密度图，用矩阵表示</td>
</tr>
<tr>
<td>stat_binhex</td>
<td>二维密度图，用六边形表示</td>
</tr>
<tr>
<td>stat_boxplot</td>
<td>绘制带触须的箱线图</td>
</tr>
<tr>
<td>stat_contour</td>
<td>绘制三维数据的等高线图</td>
</tr>
<tr>
<td>stat_density</td>
<td>绘制密度图</td>
</tr>
<tr>
<td>stat_density2d</td>
<td>绘制二维密度图</td>
</tr>
<tr>
<td>stat_function</td>
<td>添加函数曲线</td>
</tr>
<tr>
<td>stat_hline</td>
<td>添加水平线</td>
</tr>
<tr>
<td>stat_identity</td>
<td>绘制原始数据，不进行统计变换</td>
</tr>
<tr>
<td>stat_qq</td>
<td>绘制Q-Q图</td>
</tr>
<tr>
<td>stat_quantile</td>
<td>连续的分位线</td>
</tr>
<tr>
<td>stat_smooth</td>
<td>添加平滑曲线</td>
</tr>
<tr>
<td>stat_spoke</td>
<td>绘制有方向的数据点（由x和y指定位置，angle指定角度）</td>
</tr>
<tr>
<td>stat_sum</td>
<td>绘制不重复的取值之和（通常用在三点图上）</td>
</tr>
<tr>
<td>stat_summary</td>
<td>绘制汇总数据</td>
</tr>
<tr>
<td>stat_unique</td>
<td>绘制不同的数值，去掉重复的数值</td>
</tr>
<tr>
<td>stat_vline</td>
<td>绘制竖直线</td>
</tr>
</tbody></table>
<h3 id="标度函数"><a href="#标度函数" class="headerlink" title="标度函数"></a>标度函数</h3><table>
<thead>
<tr>
<th>标度函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>scale_alpha</td>
<td>alpha通道值（灰度）</td>
</tr>
<tr>
<td>scale_brewer</td>
<td>调色板，来自colorbrewer.org网站展示的颜色标度</td>
</tr>
<tr>
<td>scale_continuous</td>
<td>连续标度</td>
</tr>
<tr>
<td>scale_data</td>
<td>日期</td>
</tr>
<tr>
<td>scale_datetime</td>
<td>日期和时间</td>
</tr>
<tr>
<td>scale_discrete</td>
<td>离散值</td>
</tr>
<tr>
<td>scale_gradient</td>
<td>两种颜色构建的渐变色</td>
</tr>
<tr>
<td>scale_gradient2</td>
<td>3中颜色构建的渐变色</td>
</tr>
<tr>
<td>scale_gradientn</td>
<td>n种颜色构建的渐变色</td>
</tr>
<tr>
<td>scale_grey</td>
<td>灰度颜色</td>
</tr>
<tr>
<td>scale_hue</td>
<td>均匀色调</td>
</tr>
<tr>
<td>scale_identity</td>
<td>直接使用指定的取值，不进行标度转换</td>
</tr>
<tr>
<td>scale_linetype</td>
<td>用线条模式来展示不同</td>
</tr>
<tr>
<td>scale_manual</td>
<td>手动指定离散标度</td>
</tr>
<tr>
<td>scale_shape</td>
<td>用不同的形状来展示不同的数值</td>
</tr>
<tr>
<td>scale_size</td>
<td>用不同大小的对象来展示不同的数值</td>
</tr>
</tbody></table>
<h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><table>
<thead>
<tr>
<th>坐标函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>coord_cartesian</td>
<td>笛卡儿坐标</td>
</tr>
<tr>
<td>coord_equal</td>
<td>等尺度坐标（斜率为1）</td>
</tr>
<tr>
<td>coord_flip</td>
<td>翻转笛卡儿坐标</td>
</tr>
<tr>
<td>coord_map</td>
<td>地图投影</td>
</tr>
<tr>
<td>coord_polar</td>
<td>极坐标投影</td>
</tr>
<tr>
<td>coord_trans</td>
<td>变换笛卡儿坐标</td>
</tr>
</tbody></table>
<h3 id="分面"><a href="#分面" class="headerlink" title="分面"></a>分面</h3><table>
<thead>
<tr>
<th>分面函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>facet_grid</td>
<td>将分面放置在二维网格中</td>
</tr>
<tr>
<td>facet_wrap</td>
<td>将一维的分面按二维排列</td>
</tr>
</tbody></table>
<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><table>
<thead>
<tr>
<th>定位函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>position_dodge</td>
<td>并列</td>
</tr>
<tr>
<td>position_fill</td>
<td>填充</td>
</tr>
<tr>
<td>position_identity</td>
<td>不对位置进行处理</td>
</tr>
<tr>
<td>position_jitter</td>
<td>扰动处理</td>
</tr>
<tr>
<td>position_stack</td>
<td>堆叠处理</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>绘图函数</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title>seqkit</title>
    <url>/%E7%94%9F%E4%BF%A1/seqkit/</url>
    <content><![CDATA[<p>最新版发布页面：<a href="https://github.com/shenwei356/seqkit/releases">https://github.com/shenwei356/seqkit/releases</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>目前可以安装比较最新的版本Version: 至少 &gt;= 0.15.0。seqkit在github上的维护力度也比较大，功能比较完善，放心使用。</p>
<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install -c bioconda seqkit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补充bedops(gtf2bed)和csvtk工具(可选)</span></span><br><span class="line">conda install -c bioconda bedops -y</span><br><span class="line">conda install -c bioconda csvtk -y</span><br></pre></td></tr></table></figure>

<p>可选在[发布页][ <a href="https://github.com/shenwei356/seqkit/releases">https://github.com/shenwei356/seqkit/releases</a> ]直接下载适合的版本。</p>
<p>seqkit 一共有37个可用的命令，详细内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">amplicon        通过引物检索扩增子(或其周围的特定区域)</span><br><span class="line">bam             检查和在线绘制BAM记录文件的直方图</span><br><span class="line">common          通过id/名称/序列查找多个文件的公共序列</span><br><span class="line">concat          连接多个文件中具有相同ID的序列</span><br><span class="line">convert         转换FASTQ质量编码格式：支持格式包括：桑格，Solexa和Illumina</span><br><span class="line">duplicate       重复序列N次</span><br><span class="line">faidx           创建FASTA索引文件并提取子序列</span><br><span class="line">fish            使用局部比对在较大的序列中寻找短序列</span><br><span class="line">fq2fa           转换FASTQ到FASTA</span><br><span class="line">fx2tab          将FASTA/Q转换为表格格式(包含长度/GC含量/GC偏好)</span><br><span class="line">genautocomplete 生成shell自动完成脚本</span><br><span class="line">grep            通过ID/name/sequence/sequence motif搜索序列，允许错配</span><br><span class="line">head            打印第一条序列</span><br><span class="line">help            打印帮助信息</span><br><span class="line">locate          定位序列，或者motifs，允许错配</span><br><span class="line">mutate          编辑序列(点突变、插入、删除)</span><br><span class="line">pair            匹配双端序列文件</span><br><span class="line">range           打印一个范围内的序列</span><br><span class="line">rename          重命名重复序列ID</span><br><span class="line">replace         使用正则表达式修改名称或者序列</span><br><span class="line">restart         重置环状基因组的起始位置</span><br><span class="line">rmdup           通过id/名称/序列删除重复的序列</span><br><span class="line">sample          按数量或比例对序列进行抽样</span><br><span class="line">sana            清理损坏的单行fastq文件</span><br><span class="line">scat            real time recursive concatenation and streaming of fastx files</span><br><span class="line">seq             转换序列(反向，补充，提取ID…)</span><br><span class="line">shuffle         随机序列</span><br><span class="line">sliding         序列滑窗提取，支持环形基因组</span><br><span class="line">sort            按id/名称/序列/长度排序序列</span><br><span class="line">split           按id/seq区域/大小/部件将序列拆分为文件(主要用于FASTA)</span><br><span class="line">split2          按序列数量/文件数将序列拆分为多个文件(FASTA, PE/SE FASTQ)</span><br><span class="line">stats           FASTA/Q文件的简单统计</span><br><span class="line">subseq          通过region/gtf/bed得到子序列，包括侧翼序列</span><br><span class="line">tab2fx          转换表格格式为FASTA/Q格式</span><br><span class="line">translate       翻译DNA/RNA到蛋白质序列(支持歧义碱基)</span><br><span class="line">version         打印版本信息并检查是否更新</span><br><span class="line">watch           序列特征的监测和在线直方图</span><br></pre></td></tr></table></figure>

<p>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">      --alphabet-guess-seq-length int   seqkit根据第一个FASTA记录猜测序列类型的序列前缀的长度(0表示整个序列)(默认10000)</span><br><span class="line">  -h, --help                            显示帮助</span><br><span class="line">      --id-ncbi                         FASTA头是ncbi风格的，例如&gt;gi|110645304|ref|NC_002516.2 </span><br><span class="line">      --id-regexp string                用于解析ID的正则表达式(default &quot;^(\\S+)\\s?&quot;)，匹配空格前的部分为序列名</span><br><span class="line">      --infile-list string              输入文件列表中的文件 (one file per line), if given, they are appended to files from cli arguments</span><br><span class="line">  -w, --line-width int                  输出FASTA格式时的行宽 (0 for no wrap) (default 60)</span><br><span class="line">  -o, --out-file string                 输出 (&quot;-&quot; for stdout, suffix .gz for gzipped out) (default &quot;-&quot;) -代表标准输出，加.gz可输出压缩文件</span><br><span class="line">      --quiet                           保持安静，不要显示额外的信息</span><br><span class="line">  -t, --seq-type string                 序列类型 (dna|rna|protein|unlimit|auto) (auto, 按第一个序列自动检测) (default &quot;auto&quot;)</span><br><span class="line">  -j, --threads int                     CPU数量 (默认单核为1，多核为2) (default 2)</span><br></pre></td></tr></table></figure>

<h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="1-根据gtf构建bed文件"><a href="#1-根据gtf构建bed文件" class="headerlink" title="1.根据gtf构建bed文件"></a>1.根据gtf构建bed文件</h3><p>提取1号染色体序列及注释作为示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit grep -p 1 Arabidopsis_thaliana.TAIR10.dna.toplevel.fa.gz -o chr1.fa.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释信息按照染色体取子集：提取第一条染色体的基因组注释信息：<span class="string">&#x27;^1&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用gtf文件提取</span></span><br><span class="line">zcat Arabidopsis_thaliana.TAIR10.49.gtf.gz | grep -w &#x27;^1&#x27; | gzip -c &gt; chr1.gtf.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取第一条染色体的bed文件，用法相同</span></span><br><span class="line">zcat Arabidopsis_thaliana.TAIR10.49.bed.gz | grep -w &#x27;^1&#x27; | gzip -c &gt; chr1.bed.gz</span><br></pre></td></tr></table></figure>

<h3 id="2-stats-FASTA-Q文件的简单统计"><a href="#2-stats-FASTA-Q文件的简单统计" class="headerlink" title="2. stats FASTA/Q文件的简单统计"></a>2. stats FASTA/Q文件的简单统计</h3><p>统计序列格式fasta(fa)/fastq(fq)、内容类型DNA/RNA/Protein，序列数量、总长度，最小、平均和最大长度</p>
<p>下面就四种格式序列构建和简单统计。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> FASTA DNA</span></span><br><span class="line">echo -e &quot;&gt;seq\nacgtryswkmbdhvACGTRYSWKMBDHV&quot; | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> RNA</span> </span><br><span class="line">echo -e &quot;&gt;seq\nACGUN\nACGUN&quot; | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> Protein</span></span><br><span class="line">echo -e &quot;&gt;seq\nabcdefghijklmnpqrstvwyz&quot; | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> FASTQ DNA</span></span><br><span class="line">echo -e &quot;@read\nACTGCN\n+\n@IICCG&quot; | seqkit stats</span><br></pre></td></tr></table></figure>

<p>使用fq或者fa文件进行演示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一般模式</span><br><span class="line">seqkit stats C1_1.fq.gz</span><br><span class="line">#--输出结果tab分隔</span><br><span class="line">seqkit stats C1_1.fq.gz -T</span><br><span class="line">#--输出文件转化其他格式</span><br><span class="line">seqkit stats C1_1.fq.gz -T| csvtk pretty -t</span><br><span class="line">seqkit stats C1_1.fq.gz -T| csvtk csv2md -t</span><br><span class="line"># 统计更多信息 -a</span><br><span class="line">seqkit stats C1_1.fq.gz -a</span><br><span class="line"># j多线程加速，尤其是对于具有多个序列文件会加速</span><br><span class="line"># seqkit stats -j 2 *.fq.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-seq-转换序列-（反向、互补-提取ID）"><a href="#3-seq-转换序列-（反向、互补-提取ID）" class="headerlink" title="3. seq 转换序列 （反向、互补/提取ID）"></a>3. seq 转换序列 （反向、互补/提取ID）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit seq [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p, --complement # 取互补序列</span><br><span class="line">--dna2rna # DNA到RNA--rna2dna RNA到DNA</span><br><span class="line">-G, --gap-letters # string  gap letters (default &quot;- \t.&quot;),字符间隔符</span><br><span class="line">-l, --lower-case # 用小写字母打印序列</span><br><span class="line">-M, --max-len int # 只打印短于最大长度的的序列</span><br><span class="line">-n, --name # 只打印name</span><br><span class="line">-g, --remove-gaps # 移去组装序列中的gap</span><br><span class="line">-r, --reverse # 取反向序列</span><br><span class="line">-i, --only-id # 只打印ID而不是全名</span><br><span class="line">-q, --qual # 只序列质量</span><br><span class="line">-s, --seq # 只打印序列</span><br><span class="line">--id-regexp # string 对于解析ID的正则表达式，(default &quot;^(\\S+)\\s?&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">“-n”: 提取序列ID，包括“&gt;”后面的全部内容</span><br><span class="line">“-n -i”: 仅提取第一个空格前的ID</span><br></pre></td></tr></table></figure>

<h4 id="3-1-按长度过滤-常用"><a href="#3-1-按长度过滤-常用" class="headerlink" title="3.1 按长度过滤(常用)"></a>3.1 按长度过滤(常用)</h4><p>扩增子分析时要筛选扩增长度相近的片段，过长或过短一般都要删除。宏基因组中比如组装的结果，经常要过滤&lt;200/300bp的短片段，分箱时要筛选&gt;1000/2000的长片段使用。本条命令非常多的应用场景。筛选后结果可用 &gt; 写入文件</p>
<ul>
<li>-m 按照序列长度过滤，表示保留的最小长度，-M 此为保留的最大长度</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--提取序列长度大于60的并统计长度信息</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit seq -m 60 | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置最小序列长度和最大序列长度，用于过滤序列，并统计</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit seq -m 100 -M 1000 | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存&gt;100且&lt;1000长度的序列</span></span><br><span class="line">seqkit seq -m 100 -M 1000 hairpin.fa.gz &gt; hairpin100-1000.fa</span><br><span class="line">seqkit stat hairpin100-1000.fa</span><br></pre></td></tr></table></figure>

<h4 id="3-2-提取ID"><a href="#3-2-提取ID" class="headerlink" title="3.2 提取ID"></a>3.2 提取ID</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head gene.fa</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 名称全行</span></span></span><br><span class="line">seqkit seq gene.fa -n | head</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅仅打印ID</span></span><br><span class="line">seqkit seq gene.fa -n -i | head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用正则表达式提取名字中的信息</span></span><br><span class="line">zcat hairpin.fa.gz | head</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取ID中第二个字段作为ID</span></span><br><span class="line">seqkit seq hairpin.fa.gz -n -i --id-regexp &quot;^[^\s]+\s([^\s]+)\s&quot; | head</span><br></pre></td></tr></table></figure>

<h4 id="3-3-单行-多行转换"><a href="#3-3-单行-多行转换" class="headerlink" title="3.3 单行/多行转换"></a>3.3 单行/多行转换</h4><ul>
<li>-s提取并展示序列</li>
<li>-w 代表每行的碱基数量，0代表不换行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">仅仅提取序列 -s</span></span><br><span class="line">seqkit seq gene.fa -s -w 0|head</span><br><span class="line"><span class="meta">#</span><span class="bash">--将多行序列转化为标准4行FASTQ</span></span><br><span class="line">seqkit seq C1_1.fq.gz -w 0|head</span><br></pre></td></tr></table></figure>

<h4 id="3-4-反向-互补"><a href="#3-4-反向-互补" class="headerlink" title="3.4 反向/互补"></a>3.4 反向/互补</h4><ul>
<li>-r 序列反向</li>
<li>-p序列互补</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 序列反向互补,-r反向，-p互补</span></span><br><span class="line">seqkit seq hairpin.fa.gz -r -p|head</span><br></pre></td></tr></table></figure>

<h4 id="3-5-删除gap-大小写转换"><a href="#3-5-删除gap-大小写转换" class="headerlink" title="3.5 删除gap/大小写转换"></a>3.5 删除gap/大小写转换</h4><ul>
<li>-g 去除序列中的间隔,将中间的横杠去掉</li>
<li>-u转化序列为大写字母展示</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;&gt;seq\nACGT-ACTGC-acc&quot; | seqkit seq -g -u</span><br></pre></td></tr></table></figure>

<h4 id="3-6-RNA转为DNA"><a href="#3-6-RNA转为DNA" class="headerlink" title="3.6 RNA转为DNA"></a>3.6 RNA转为DNA</h4><ul>
<li>—rna2dna 将RNA序列转化为DNA序列</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;&gt;seq\nUCAUAUGCUUGUCUCAAAGAUUA&quot; | seqkit seq --rna2dna</span><br></pre></td></tr></table></figure>

<h3 id="4-subseq通过指定区域"><a href="#4-subseq通过指定区域" class="headerlink" title="4. subseq通过指定区域"></a>4. subseq通过指定区域</h3><ul>
<li>-r 通过区域来截取序列</li>
</ul>
<p>如1:12提取前12个碱基，-12:-1提取序列结尾12个碱基；<br>for last 12 bases, 13:-1 for cutting first 12 bases. type “seqkit subseq -h” for more examples</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-提取序列前1：12个碱基</span></span><br><span class="line">zcat C1_1.fq.gz | seqkit subseq -r 1:12 |head</span><br><span class="line"><span class="meta">#</span><span class="bash">-提取序列最后1：12个碱基</span></span><br><span class="line">zcat C1_1.fq.gz | seqkit subseq -r -12:-1 |head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">取第12至倒数第12个碱基，即前11和后11个碱基去掉</span></span><br><span class="line">zcat C1_1.fq.gz | seqkit subseq -r 12:-12| head</span><br></pre></td></tr></table></figure>

<p>基于gtf/bed信息挑选子序列。</p>
<ul>
<li>—gtf  根据gtf文件挑选基因，这部分功能用于根据基因注释快速提取基因序列，在宏基因组、转录组、重测序中常用。—chr 选择染色体，—feature cds选择序列类型</li>
</ul>
<p>以拟南芥基因组的序列和注释数据演示：提取第一条染色体上的CDS基因信息，并统计基本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit subseq --gtf Arabidopsis_thaliana.TAIR10.49.gtf.gz --chr 1 --feature cds  Arabidopsis_thaliana.TAIR10.dna.toplevel.fa.gz  &gt; chr1.gtf.cds.fa</span><br><span class="line">seqkit stats chr1.gtf.cds.fa</span><br></pre></td></tr></table></figure>

<ul>
<li>-u 可以提取目标基因上游的序列</li>
<li>-f 目标区域不展示</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--挑选序列并多加上上游的3个碱基</span></span><br><span class="line">seqkit subseq --gtf Arabidopsis_thaliana.TAIR10.49.gtf.gz Arabidopsis_thaliana.TAIR10.dna.toplevel.fa.gz -u 3 |head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅提取上游序列，如提取启动子区2k：-f仅定位不输出位置序列，-u输出上游序列，此处示例3bp</span></span><br><span class="line">seqkit subseq --gtf Arabidopsis_thaliana.TAIR10.49.gtf.gz Arabidopsis_thaliana.TAIR10.dna.toplevel.fa.gz -u 3 -f |head</span><br></pre></td></tr></table></figure>

<h3 id="5-sliding-滑窗提取序列，支持环状基因组"><a href="#5-sliding-滑窗提取序列，支持环状基因组" class="headerlink" title="5. sliding 滑窗提取序列，支持环状基因组"></a>5. sliding 滑窗提取序列，支持环状基因组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-s 步长为3，-W 序列长度为6个碱基</span></span><br><span class="line">echo -e &quot;&gt;seq\nACGTacgtNN&quot; | seqkit sliding -s 3 -W 6</span><br><span class="line"><span class="meta">#</span><span class="bash"> -g 贪婪模式，后面不足6个那也取</span></span><br><span class="line">echo -e &quot;&gt;seq\nACGTacgtNN&quot; | seqkit sliding -s 3 -W 6 -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 环状DNA模式-C，首尾不算中断，环状</span></span><br><span class="line">echo -e &quot;&gt;seq\nACGTacgtNN&quot; | seqkit sliding -s 3 -W 6 -C</span><br></pre></td></tr></table></figure>

<p>步长为5，取30个碱基序列，然后统计GC含量</p>
<ul>
<li>fx2tab：统计fasta/fastq序列的信息为表格</li>
<li>-n仅输出ID，不输出序列</li>
<li>-g为GC含量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat hairpin.fa.gz | seqkit sliding -s 5 -W 30 | seqkit fx2tab -n -g |head</span><br></pre></td></tr></table></figure>

<h3 id="6-faidx-创建FASTA索引文件并提取子序列"><a href="#6-faidx-创建FASTA索引文件并提取子序列" class="headerlink" title="6. faidx 创建FASTA索引文件并提取子序列"></a>6. faidx 创建FASTA索引文件并提取子序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">zcat hairpin.fa.gz &gt; hairpin.fa</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建索引*.fai文件</span></span><br><span class="line">seqkit faidx hairpin.fa</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ID信息：hsa-let-7a-1 hsa-let-7a-2</span></span><br><span class="line">seqkit faidx hairpin.fa hsa-let-7a-1 hsa-let-7a-2</span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 标题行全部显示</span></span><br><span class="line">seqkit faidx hairpin.fa hsa-let-7a-1 hsa-let-7a-2 -f</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取序列并选择区域显示</span></span><br><span class="line">seqkit faidx hairpin.fa hsa-let-7a-1:1-10</span><br><span class="line">seqkit faidx hairpin.fa hsa-let-7a-1:-10--1</span><br><span class="line">seqkit faidx hairpin.fa hsa-let-7a-1:1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查hsa开头的序列并统计</span></span><br><span class="line">seqkit faidx hairpin.fa hsa -r | seqkit stats</span><br></pre></td></tr></table></figure>

<h3 id="7-watch-序列质量的监测和在线直方图"><a href="#7-watch-序列质量的监测和在线直方图" class="headerlink" title="7. watch 序列质量的监测和在线直方图"></a>7. watch 序列质量的监测和在线直方图</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">-取对数展示直方图</span></span><br><span class="line">seqkit watch -L -f ReadLen hairpin.fa</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每五千个做一个图保存在pdf文件中</span></span><br><span class="line">seqkit watch -p 500000 -O qhist.pdf -f MeanQual C1_1.fq.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>从有错误记录的fastq文件中挽救可用的读取</li>
</ul>
<h3 id="8-sana：清理损坏fastq文件"><a href="#8-sana：清理损坏fastq文件" class="headerlink" title="8. sana：清理损坏fastq文件"></a>8. sana：清理损坏fastq文件</h3><p>这里我专门将C1_1.fq的第一个序列进行了错位，进行测试。这个操作往往在进行数据整合的时候可以有很大作用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcat C1_1.fq.gz|sed &#x27;2 s/^/A/&#x27; &gt; C1_1_bad.fq</span><br><span class="line">seqkit sana C1_1_bad.fq -o rescued.fq.gz</span><br></pre></td></tr></table></figure>

<h3 id="9-fq2fa-将fq转为fa格式"><a href="#9-fq2fa-将fq转为fa格式" class="headerlink" title="9. fq2fa 将fq转为fa格式"></a>9. fq2fa 将fq转为fa格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit fq2fa C1_1.fq.gz -o C1_1.fa</span><br></pre></td></tr></table></figure>

<h3 id="10-fx2tab-amp-tab2fx-序列转化表格格式"><a href="#10-fx2tab-amp-tab2fx-序列转化表格格式" class="headerlink" title="10. fx2tab &amp; tab2fx 序列转化表格格式"></a>10. fx2tab &amp; tab2fx 序列转化表格格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit fx2tab [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a, --alphabet 打印字母表字母</span><br><span class="line">-q, --avg-qual 打印read的平均质量</span><br><span class="line">-B, --base-content strings 输出指定的碱基含量</span><br><span class="line">-g, --gc 输出GC含量</span><br><span class="line">-H, --header-line 打印标题列</span><br><span class="line">-l, --length 打印序列的长度</span><br><span class="line">-n, --name 只打印名字，而没有序列或者质量</span><br><span class="line">-i, --only-id 只打印基因的ID</span><br></pre></td></tr></table></figure>

<p>这一转化很有用，往往用于表格/矩阵处理的时候。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit fx2tab hairpin.fa.gz | head -n 2</span><br></pre></td></tr></table></figure>

<p>通过矩阵格式的序列文件统计序列长度和质量值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印序列长度、GC含量</span></span><br><span class="line">seqkit fx2tab hairpin.fa.gz -l -g -n -i -H | head</span><br></pre></td></tr></table></figure>

<ul>
<li>tab2fx 和表格格式转化为序列格式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> seqkit tab2fx 表格形式转化为序列形式</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit fx2tab | seqkit tab2fx | head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转化为表格，然后排序，然后转化回去</span></span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit fx2tab -l \</span><br><span class="line">    | sort -t &quot;`echo -e &#x27;\t&#x27;`&quot; -n -k4,4 \</span><br><span class="line">    | seqkit tab2fx | head</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于下面的命令</span></span><br><span class="line">seqkit sort -l hairpin.fa.gz | head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过这个转化可以将很多在表格中实现的数据处理方法用于序列</span></span><br><span class="line">例如下面的提取1000个序列：seqkit fx2tab hairpin.fa.gz | head -n 1000 | seqkit tab2fx | head</span><br></pre></td></tr></table></figure>

<h3 id="11-translate-翻译DNA-RNA为蛋白质序列"><a href="#11-translate-翻译DNA-RNA为蛋白质序列" class="headerlink" title="11. translate 翻译DNA/RNA为蛋白质序列"></a>11. translate 翻译DNA/RNA为蛋白质序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">--转化为蛋白序列</span></span><br><span class="line">seqkit translate gene.fa|head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去除<span class="string">&#x27;X&#x27;</span> 和 <span class="string">&#x27;*&#x27;</span></span></span><br><span class="line">seqkit translate hairpin.fa </span><br><span class="line">seqkit translate hairpin.fa --trim | head</span><br></pre></td></tr></table></figure>

<h3 id="12-grep-序列匹配"><a href="#12-grep-序列匹配" class="headerlink" title="12. grep  序列匹配"></a>12. grep  序列匹配</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit grep [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n, --by-name # 匹配整个序列的名字，包含deion部分，而不是序列id。</span><br><span class="line">-s, --by-seq # 匹配序列</span><br><span class="line">-d, --degenerate</span><br><span class="line">pattern/motif 包含简并碱基</span><br><span class="line">-i, --ignore-case # 忽略大小写</span><br><span class="line">-v, --invert-match # 输出不匹配此模式的内容</span><br><span class="line">-p, # 匹配模式，支持连续写多个模式，匹配任一模式即输出。如-p ^ATG -p TAA$。注意该功能仅能正向匹配，不能实现对互补链匹配。</span><br><span class="line">-f, --pattern-file string # 支持匹配模式写到一个文件中，如要提取的序列ID。</span><br><span class="line">-R, --region string # 匹配位置选择。e.g 1:12 for first 12 bases, -12:-1 for last 12 bases</span><br><span class="line">-r, --use-regexp # 使用正则表达式，必须加入此参数,如^匹配首端。同-p联合使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成一个ID列表</span></span><br><span class="line">grep &#x27;&gt;&#x27; C1_1.fa|cut -c2-|head -n 10 &gt; id.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用序列id列表进行搜索(不包含空格)</span></span><br><span class="line">seqkit grep -f id.txt C1_1.fq.gz -o result.fq.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用序列名称列表进行搜索(它们可能包含空格)</span></span><br><span class="line">seqkit grep -n -f id.txt C1_1.fq.gz -o result.fa.gz</span><br><span class="line">zcat  result.fa.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取hsa开头的序列</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit grep -r -p ^hsa |head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v参数v用于移除序列</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit grep -r -p ^hsa -p ^mmu -v | head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取ID</span></span><br><span class="line">zcat miRNA.diff.gz | grep ^# -v | grep NEW | cut -f 2 &gt; list</span><br><span class="line">head list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据ID提取文件</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit grep -f list &gt; new.fa</span><br><span class="line">head new.fa</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取包含特定碱基组合的序列</span></span><br><span class="line">cat hairpin.fa.gz | seqkit grep -s -i -p aggcg |head</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计</span></span><br><span class="line">cat hairpin.fa.gz | seqkit grep -s -i -p aggcg | seqkit stats</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  去除 包含特定组合碱基的序列</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit grep -s -r -i -p ^aggcg |head</span><br></pre></td></tr></table></figure>

<h3 id="13-locate-输出匹配位置"><a href="#13-locate-输出匹配位置" class="headerlink" title="13. locate 输出匹配位置"></a>13. locate 输出匹配位置</h3><p>对grep的拓展，可以正反链同时匹配，输出匹配的位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit locate [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d, --degenerate# pattern/motif contains degenerate base 包含简并碱基模式和motif</span><br><span class="line">--gtf # 输出为GTF格式</span><br><span class="line">-i, --ignore-case# ignore case 忽视大小写</span><br><span class="line">-P, --only-positive-strand# only search at positive strand 只在正链搜索</span><br><span class="line">-p, --pattern value# search pattern/motif</span><br><span class="line">-f, --pattern-file string# pattern/motif file (FASTA format) 模式或motif文件（fasta格式）</span><br><span class="line">-m, --max-mismatch int # 通过序列匹配时允许的最大错配</span><br><span class="line">-G, --non-greedy # 非贪婪模式，更快但是可能错过与其他重叠的motif</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">＃　其他两种输出格式</span><br><span class="line">zcat hairpin.fa.gz | seqkit locate -i -d -p AUGGACUN --bed</span><br><span class="line">zcat hairpin.fa.gz | seqkit locate -i -d -p AUGGACUN --gtf</span><br></pre></td></tr></table></figure>

<h3 id="14-fish-使用局部比对在较大的序列中寻找短序列"><a href="#14-fish-使用局部比对在较大的序列中寻找短序列" class="headerlink" title="14. fish 使用局部比对在较大的序列中寻找短序列"></a>14. fish 使用局部比对在较大的序列中寻找短序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &#x27;&gt;seq\nACGACGACGA&#x27; \</span><br><span class="line">    | seqkit locate -p ACGA -G | csvtk -t pretty</span><br><span class="line"></span><br><span class="line">echo -e &#x27;&gt;seq\nACGACGACGA&#x27; \</span><br><span class="line">    | seqkit fish -F ACGA -a 2&gt;&amp;1 | csvtk -t pretty</span><br></pre></td></tr></table></figure>

<h3 id="15-amplicon-通过引物检索扩增子-或其周围的特定区域"><a href="#15-amplicon-通过引物检索扩增子-或其周围的特定区域" class="headerlink" title="15. amplicon 通过引物检索扩增子(或其周围的特定区域)"></a>15. amplicon 通过引物检索扩增子(或其周围的特定区域)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -ne &quot;&gt;seq\nacgcccactgaaatga\n&quot; \</span><br><span class="line">    | seqkit amplicon -F ccc -R ttt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置输出格式为bed，匹配的位点等信息</span></span><br><span class="line">echo -ne &quot;&gt;seq\nacgcccactgaaatga\n&quot; \</span><br><span class="line">    | seqkit amplicon -F ccc -R ttt --bed</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">- 使用引物文件，这用于刘老师组的高通量分菌的序列拆分速度应该很客观</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat seqs4amplicon.fa | seqkit amplicon -p primers.tsv --bed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出除去引物之外的部分，-r输出几个碱基</span></span><br><span class="line">echo -ne &quot;&gt;seq\nacgcccactgaaatga\n&quot; \</span><br><span class="line">    | seqkit amplicon -F ccc -R ttt -r 4:7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出格式为bed</span></span><br><span class="line">echo -ne &quot;&gt;seq\nacgcccactgaaatga\n&quot; \</span><br><span class="line">    | seqkit amplicon -F ccc -R ttt -r 4:7 --bed</span><br></pre></td></tr></table></figure>

<h3 id="16-duplicate-对序列重复N次"><a href="#16-duplicate-对序列重复N次" class="headerlink" title="16. duplicate 对序列重复N次"></a>16. duplicate 对序列重复N次</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重复序列1次，但是名字没有修改</span></span><br><span class="line">cat hairpin.fa | seqkit head -n 1 \</span><br><span class="line">    | seqkit duplicate -n 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对重复序列改名，使其独一无二</span></span><br><span class="line">cat hairpin.fa | seqkit head -n 1 \</span><br><span class="line">    | seqkit duplicate -n 2 | seqkit rename</span><br></pre></td></tr></table></figure>

<h3 id="17-rmdup-通过id-名称-序列删除重复的序列"><a href="#17-rmdup-通过id-名称-序列删除重复的序列" class="headerlink" title="17. rmdup 通过id/名称/序列删除重复的序列"></a>17. rmdup 通过id/名称/序列删除重复的序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit rmdup [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n, --by-name 通过全名而不是id</span><br><span class="line">-s, --by-seq 通过序列</span><br><span class="line">-D, --dup-num-file string 保存数量的文件并列出重复的seqs</span><br><span class="line">-d, --dup-seqs-file string 保存重复seqs的文件</span><br><span class="line">-i, --ignore-case 忽视字母大小写</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 去除重复的序列</span></span><br><span class="line">zcat hairpin.fa.gz | seqkit rmdup -s -o clean.fa.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存重复序列得到文件 -D duplicated.detail.txt</span></span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit rmdup -s -i -o clean.fa.gz -d duplicated.fa.gz -D duplicated.detail.txt</span><br></pre></td></tr></table></figure>

<h3 id="18-common-：通过id-名称-序列查找多个文件的公共序列"><a href="#18-common-：通过id-名称-序列查找多个文件的公共序列" class="headerlink" title="18. common ：通过id/名称/序列查找多个文件的公共序列"></a>18. common ：通过id/名称/序列查找多个文件的公共序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit common [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n, --by-name# 匹配整个序列的名字，包含deion部分，而不是序列id</span><br><span class="line">-s, --by-seq# match by sequence</span><br><span class="line">-i, --ignore-case# ignore case</span><br><span class="line">-m, --md5# use MD5 reduce memory usage</span><br></pre></td></tr></table></figure>

<p>这里同时支持fa和fq文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过ID匹配，文件夹下全部的fa序列公共部分输出来</span></span><br><span class="line">seqkit common *.fq.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过-n实现全部名字匹配，-o输出结果</span></span><br><span class="line">seqkit common *.fq.gz -n -o common.fq </span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过-s序列匹配</span></span><br><span class="line">seqkit common *.fq.gz -s -i -o common.fq</span><br></pre></td></tr></table></figure>

<h3 id="19-split-拆分序列为子文件"><a href="#19-split-拆分序列为子文件" class="headerlink" title="19. split 拆分序列为子文件"></a>19. split 拆分序列为子文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit split [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i, --by-id# split squences according to sequence ID</span><br><span class="line">-p, --by-part int# 将一个文件分割成N 份</span><br><span class="line">-s, --by-size int# 将一个文件按照N 条序列一个文件进行分割</span><br><span class="line">-O, --out-dir string# output directory (default value is infile.split)</span><br><span class="line">-2, --two-pass# two-pass mode to lower memory usage(only FAST)</span><br></pre></td></tr></table></figure>

<p>按名称ID、给定区域的子序列、文件大小或序列数量将序列拆分为文件</p>
<p>可用于将大文件拆分后，并行处理，加速分析。如从contig中预测基因。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">按照10000个序列为一个文件拆分，结果为hairpin.fa.gz.split/目录 ，文件名为hairpin.part_00x.fasta，-s</span></span><br><span class="line">seqkit split hairpin.fa.gz -s 10000 -2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将序列拆分为四个部分(常用，等分然后并行)</span></span><br><span class="line">seqkit split hairpin.fa.gz -p 5 -2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复杂一点的就是按照ID区分</span></span><br><span class="line">seqkit split hairpin.fa.gz -i --id-regexp &quot;^([\w]+)\-&quot; -2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照前三个序列碱基来区分</span></span><br><span class="line">seqkit split hairpin.fa.gz -r 1:3 -2</span><br></pre></td></tr></table></figure>

<h3 id="20-split2-拆分文件-升级版本"><a href="#20-split2-拆分文件-升级版本" class="headerlink" title="20. split2 拆分文件 升级版本"></a>20. split2 拆分文件 升级版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flags:</span><br><span class="line">  -l, --by-length string   split sequences into chunks of &gt;=N bases, supports K/M/G suffix</span><br><span class="line">  -p, --by-part int        按照拆分出来的数量，比如：拆分成两个子文件2。-s, --by-size int        按照序列数量拆分</span><br><span class="line">  -f, --force              强制覆盖文件</span><br><span class="line">  -h, --help               查看帮助文件</span><br><span class="line">  -O, --out-dir string     输出文件夹 (default value is $infile.split)</span><br><span class="line">  -1, --read1 string       (gzipped) 双端序列第一个  </span><br><span class="line">  -2, --read2 string       (gzipped) 双端序列第二个</span><br></pre></td></tr></table></figure>

<p>同时支持fa和fq文件。单端和双端序列拆分实例</p>
<p>-f强制覆盖结果，适合重复计算时使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit split2 hairpin.fa.gz -s 10000 -f</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 双端序列拆分(重点)，p指定拆分数量，-O指定输出目录，-f覆盖结果，默认为压缩</span></span><br><span class="line">seqkit split2 -1 C1_1.fq.gz -2 C1_2.fq.gz -p 2 -O out -f</span><br></pre></td></tr></table></figure>

<h3 id="21-pair-拼接两个fastq文件"><a href="#21-pair-拼接两个fastq文件" class="headerlink" title="21. pair 拼接两个fastq文件"></a>21. pair 拼接两个fastq文件</h3><p>留下匹配的，去除不匹配的，这里我们使用扩增子的双端序列做一个演示：</p>
<p>注意：双端序列在两个文件中的顺序最好是一样的，否则会消耗大量内存去匹配。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit pair -1 C1_1.fq.gz -2 C1_2.fq.gz -O result</span><br><span class="line"><span class="meta">#</span><span class="bash"> -u 输出未匹配上的文件</span></span><br><span class="line">seqkit pair -1 C1_1.fq.gz -2 C1_2.fq.gz -O result -u -f</span><br></pre></td></tr></table></figure>

<h3 id="22-sample-按数量或比例对序列进行抽样。"><a href="#22-sample-按数量或比例对序列进行抽样。" class="headerlink" title="22. sample 按数量或比例对序列进行抽样。"></a>22. sample 按数量或比例对序列进行抽样。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit sample [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n, --number int# sample by number (result may not exactly match)</span><br><span class="line">-p, --proportion float# sample by proportion（按比例提）</span><br><span class="line">-s, --rand-seed int# rand seed for shuffle (default 11)</span><br><span class="line">-2, --two-pass# 2-pass modelower memory</span><br></pre></td></tr></table></figure>

<p>按照百分比例和序列数量进行抽样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 抽样百分之十</span></span><br><span class="line">zcat C1_1.fq.gz | seqkit sample -p 0.1 -o sample.fq.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 抽样1000条</span></span><br><span class="line">zcat C1_1.fq.gz | seqkit sample -n 1000 -o sample.fq.gz</span><br></pre></td></tr></table></figure>

<p>注意：1000条并不是很准确，可能是900多条，为什么呢？看这里了解问题。<a href="https://bioinf.shenwei.me/seqkit/note/#effect-of-random-seed-on-results-of-seqkit-sample">https://bioinf.shenwei.me/seqkit/note/#effect-of-random-seed-on-results-of-seqkit-sample</a></p>
<p>这里为大家展示一下减少内存的序列抽样方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 抽样 seqkit sample</span> </span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit sample -p 0.1 \</span><br><span class="line">    | seqkit head -n 1000 -o sample.fa.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置随机种子，方便重复结果: -s 11</span></span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit sample -p 0.1 -s 11 |head</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 抽样后打乱序列 :seqkit shuffle</span></span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit sample -p 0.1 \</span><br><span class="line">    | seqkit shuffle -o sample.fa.gz</span><br></pre></td></tr></table></figure>

<h3 id="23-range-打印序列-按照一个范围"><a href="#23-range-打印序列-按照一个范围" class="headerlink" title="23. range 打印序列 按照一个范围"></a>23. range 打印序列 按照一个范围</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印一个范围内的序列</span></span><br><span class="line">cat hairpin.fa | seqkit range -r 1:10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印最后几行的序列</span></span><br><span class="line">cat hairpin.fa | seqkit range -r -100:-1 | seqkit stats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印中间范围的序列</span></span><br><span class="line">cat hairpin.fa | seqkit range -r 101:150 | seqkit stats</span><br></pre></td></tr></table></figure>

<h3 id="24-replace-使用正则表达式替换名称-序列。"><a href="#24-replace-使用正则表达式替换名称-序列。" class="headerlink" title="24. replace 使用正则表达式替换名称/序列。"></a>24. replace 使用正则表达式替换名称/序列。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit replace [flag]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s, --by-seq # 代替seq</span><br><span class="line">-i, --ignore-case # 忽视大小写</span><br><span class="line">-K, --keep-key </span><br><span class="line">-p, --pattern # string 搜索正则表达式</span><br><span class="line">-r, --replacement # string 替换物从两个配对端读数的文件提取配对的reads</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改序列名称：删除空格后内存</span></span><br><span class="line">echo -e &quot;&gt;seq1 abc-123\nACGT-ACGT&quot; \</span><br><span class="line">    | seqkit replace -p &quot;\s.+&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改序列名：替换</span></span><br><span class="line">echo -e &quot;&gt;seq1 abc-123\nACGT-ACGT&quot; \</span><br><span class="line">    | seqkit replace -p &quot;\-&quot; -r &#x27;=&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改序列：去除序列间隔</span></span><br><span class="line">echo -e &quot;&gt;seq1 abc-123\nACGT-ACGT&quot; \</span><br><span class="line">    | seqkit replace -p &quot; |-&quot; -s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改序列：给每一个碱基加上空格</span></span><br><span class="line">echo -e &quot;&gt;seq1 abc-123\nACGT-ACGT&quot; \</span><br><span class="line">    | seqkit replace -p &quot;(.)&quot; -r &#x27;$1 &#x27; -s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用字符加数据重命名序列-用于扩增子代表序列改名非常优秀</span></span><br><span class="line">echo -e &quot;&gt;abc\nACTG\n&gt;123\nATTT&quot; \</span><br><span class="line">    |  seqkit replace -p .+ -r &quot;ASV_&#123;nr&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo -e &quot;&gt;abc\nACTG\n&gt;123\nATTT&quot; \</span><br><span class="line">    |  seqkit replace -p .+ -r &quot;SAV_&#123;nr&#125;&quot; --nr-width 5</span><br></pre></td></tr></table></figure>

<h3 id="25-rename-重命名重复的ID"><a href="#25-rename-重命名重复的ID" class="headerlink" title="25. rename 重命名重复的ID"></a>25. rename 重命名重复的ID</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重命名：相同序列会在后面加上_2 来处理</span></span><br><span class="line">echo -e &quot;&gt;a comment\nacgt\n&gt;b comment of b\nACTG\n&gt;a comment\naaaa&quot; \</span><br><span class="line">    | seqkit rename</span><br></pre></td></tr></table></figure>

<h3 id="26-concat-连接多个文件中具有相同ID的序列"><a href="#26-concat-连接多个文件中具有相同ID的序列" class="headerlink" title="26. concat 连接多个文件中具有相同ID的序列"></a>26. concat 连接多个文件中具有相同ID的序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里演示组合前面两个碱基和最后两个碱基的用法</span></span><br><span class="line">seqkit concat &lt;(seqkit subseq -r 1:2 C1_1.fq.gz) &lt;(seqkit subseq -r -2:-1 C1_2.fq.gz)|head</span><br></pre></td></tr></table></figure>

<h3 id="27-shuffle-随机打乱序列-默认全部读入内存"><a href="#27-shuffle-随机打乱序列-默认全部读入内存" class="headerlink" title="27. shuffle 随机打乱序列 默认全部读入内存"></a>27. shuffle 随机打乱序列 默认全部读入内存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit shuffle hairpin.fa.gz -2  &gt; shuffled.fa</span><br></pre></td></tr></table></figure>

<h3 id="28-sort-按id-名称-序列-长度排序序列"><a href="#28-sort-按id-名称-序列-长度排序序列" class="headerlink" title="28. sort 按id/名称/序列/长度排序序列"></a>28. sort 按id/名称/序列/长度排序序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit sort [flags]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-l, --by-length# 按照序列长度排序</span><br><span class="line">-n, --by-name# by full name</span><br><span class="line">-s, --by-seq# 按照序列排序</span><br><span class="line">-i, --ignore-case# 按序列排序时忽略大小写</span><br><span class="line">-r, --reverse# 反向排序</span><br><span class="line">-2, --two-pass# 对于FASTA序列排序可以减少内存</span><br></pre></td></tr></table></figure>

<ul>
<li>—quiet 屏幕不输出过程</li>
<li>-i 排序忽略大小写</li>
<li>-l 按照序列长度排序</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ID排序</span></span><br><span class="line">echo -e &quot;&gt;seq1\nACGTNcccc\n&gt;SEQ2\nacgtnAAAA&quot; \</span><br><span class="line">    | seqkit sort --quiet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照ID排序，忽略大小写</span></span><br><span class="line">echo -e &quot;&gt;seq1\nACGTNcccc\n&gt;SEQ2\nacgtnAAAA&quot; \</span><br><span class="line">    | seqkit sort --quiet -i</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照序列长度排序，由小到大</span></span><br><span class="line">echo -e &quot;&gt;seq1\nACGTNcccc\n&gt;SEQ2\nacgtnAAAAnnn\n&gt;seq3\nacgt&quot; \</span><br><span class="line">    | seqkit sort --quiet -l</span><br></pre></td></tr></table></figure>

<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><h3 id="1-mutate-编辑序列-点突变、插入、删除"><a href="#1-mutate-编辑序列-点突变、插入、删除" class="headerlink" title="1. mutate 编辑序列(点突变、插入、删除)"></a>1. mutate 编辑序列(点突变、插入、删除)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改第一个碱基</span></span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -p 1:x</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改第五个位置的碱基，输出信息隐藏</span>    </span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -p 5:x --quiet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以同时修改多个碱基</span></span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -p 1:x -p -1:x --quiet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除碱基</span></span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -d 1:1 --quiet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除倒数三个碱基</span></span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -d -3:-1 --quiet</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入碱基</span></span><br><span class="line">echo -ne &quot;&gt;1\nACTGNactgn\n&gt;2\nactgnACTGN\n&quot; \</span><br><span class="line">    | seqkit mutate -i 0:xx --quiet</span><br></pre></td></tr></table></figure>

<h3 id="2-head-展示开头N行的序列"><a href="#2-head-展示开头N行的序列" class="headerlink" title="2. head 展示开头N行的序列"></a>2. head 展示开头N行的序列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">seqkit head -n 1 hairpin.fa.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-locate-定位子序列或者保守序列位置"><a href="#3-locate-定位子序列或者保守序列位置" class="headerlink" title="3. locate 定位子序列或者保守序列位置"></a>3. locate 定位子序列或者保守序列位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat gene.fa | seqkit locate -p ACT | csvtk pretty -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整错配 最大错配为1</span></span><br><span class="line">cat gene.fa \</span><br><span class="line">  | seqkit locate -p ACTG -m 1 \</span><br><span class="line">  | csvtk pretty -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简并碱基</span></span><br><span class="line">zcat hairpin.fa.gz \</span><br><span class="line">    | seqkit locate -i -d -p AUGGACUN \</span><br><span class="line">    | head -n 4</span><br></pre></td></tr></table></figure>

<h3 id="4-restart-重置循环基因组的起始位置"><a href="#4-restart-重置循环基因组的起始位置" class="headerlink" title="4. restart 重置循环基因组的起始位置"></a>4. restart 重置循环基因组的起始位置</h3><p>这个使用的比较少</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;&gt;seq\nacgtnACGTN&quot;</span><br><span class="line"></span><br><span class="line">echo -e &quot;&gt;seq\nacgtnACGTN&quot; | seqkit restart -i 2</span><br><span class="line">echo -e &quot;&gt;seq\nacgtnACGTN&quot; | seqkit restart -i -2</span><br></pre></td></tr></table></figure>

<h3 id="5-convet-二代测序质量值的转化为-Sanger"><a href="#5-convet-二代测序质量值的转化为-Sanger" class="headerlink" title="5. convet 二代测序质量值的转化为 Sanger"></a>5. convet 二代测序质量值的转化为 Sanger</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Illumina-1.8+ -&gt; Sanger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.8.fq.gz  | seqkit head -n 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 40分以上的都认为40 Illumina-1.8+ -&gt; Sanger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.8.fq.gz -f | seqkit head -n 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Illumina-1.8+ -&gt; Illumina-1.5+</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.8.fq.gz --to Illumina-1.5+ | seqkit head -n 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Illumina-1.8+ -&gt; Illumina-1.5+ -&gt;  Sanger.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.8.fq.gz --to Illumina-1.5+ | seqkit convert | seqkit head -n 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Solexa -&gt; Sanger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.8.fq.gz --from Solexa</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Illumina-1.5+ -&gt; Sanger</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> seqkit convert tests/Illimina1.5.fq | seqkit head -n 1</span></span><br></pre></td></tr></table></figure>

<h2 id="技术细节和使用"><a href="#技术细节和使用" class="headerlink" title="技术细节和使用"></a>技术细节和使用</h2><h3 id="1-seqkit处理压缩文件"><a href="#1-seqkit处理压缩文件" class="headerlink" title="1. seqkit处理压缩文件"></a>1. seqkit处理压缩文件</h3><p>pigz 或者 gzip 在部分操作中不能加速，所以在v.0.8.1版本以便关注了，然而还是可以使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pigz -d -c seqs.fq.gz | seqkit xxx</span><br></pre></td></tr></table></figure>

<p>因为seqkit使用了pgzip去写gzip。这比gzip和pigz更快。（10X of gzip, 4X of pigz），而且gzip压缩文件比较大。</p>
<h3 id="2-从数据处理格式来讲"><a href="#2-从数据处理格式来讲" class="headerlink" title="2. 从数据处理格式来讲"></a>2. 从数据处理格式来讲</h3><p>​    seqkit无缝支持fa和fq格式数据，并且可以自动识别。除了 faidx之外，全部命令都可以处理这两种格式的数据。</p>
<p>​    只有fa格式支持命令(subseq, split, sort和shuffle)利用FASTA索引(by flag -two-pass)下提高大文件的性能。</p>
<p>​    序列类型的检测DNA/RNA/Protein，会使用子序列进行，默认检测第一条子序列，通过—alphabet-guess-seq-length参数默认为10000，如果长度小于10000，则检查整条序列。</p>
<h3 id="3-序列名字"><a href="#3-序列名字" class="headerlink" title="3. 序列名字"></a>3. 序列名字</h3><p>​    所有的软件，包括seqkit，<strong>使用第一个空格之前的字符作为序列的名字</strong>：</p>
<p>​    需要注意的NCBI等一些序列的格式并不是如此，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">gi|110645304|ref|NC_002516.2| Pseudomona</span></span><br></pre></td></tr></table></figure>

<p>​    想要在seqkit中识别出来的序列ID为：NC_002516.2。</p>
<p>​    此时使用参数<code>--id-regexp &quot;\|([^\|]+)\| &quot;</code>，或者添加参数<code>--id-ncbi</code>，但如果是只要前面的gi数字作为ID的话，添加参数：<code>--id-regexp &quot;^gi\|([^\|]+)\|&quot;</code>。</p>
<p>​    注意：.seqkit.fai不同于samtools产生的.fai格式文件，seqkit使用整个序列开头而不是ID作为索引。</p>
<h3 id="4-并行运算"><a href="#4-并行运算" class="headerlink" title="4. 并行运算"></a>4. 并行运算</h3><p>​    单核CPU默认线程：—threads 1，多个CPU，线程默认2.</p>
<h3 id="5-内存占用"><a href="#5-内存占用" class="headerlink" title="5. 内存占用"></a>5. 内存占用</h3><p>​    seqkit许多的命令都不需要将整个序列读入到内存中。包括：stat, fq2fa, fx2tab, tab2fx, grep, locate, replace, seq, sliding, subseq。</p>
<p>​    注意：如果使用subseq —gtf | —bed时，如果GTF或者BED文件太大，内存使用量会暴增，可以通过指定染色体：—chr，或者—feature去限制特征。</p>
<p>​    有一些命令需要将文件读入内存，但是可以用过rmdup 和 common减少内存使用。</p>
<h3 id="6-随机—抽样"><a href="#6-随机—抽样" class="headerlink" title="6. 随机—抽样"></a>6. 随机—抽样</h3><p>​    抽样命令sample和shuffle使用了随机功能，为了保证重现性，可以使用<code>-s</code>设置随机种子。这可以保证在不同的环境中可以有相同的抽样结果。</p>
]]></content>
      <categories>
        <category>生信</category>
      </categories>
      <tags>
        <tag>生信</tag>
        <tag>biosoft</tag>
        <tag>CommonSoft</tag>
      </tags>
  </entry>
</search>
